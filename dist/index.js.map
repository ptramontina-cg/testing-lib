{"version":3,"sources":["../node_modules/tsup/assets/esm_shims.js","../node_modules/fluent-ffmpeg/lib/utils.js","../node_modules/fluent-ffmpeg/lib/options/inputs.js","../node_modules/fluent-ffmpeg/lib/options/audio.js","../node_modules/fluent-ffmpeg/lib/options/video.js","../node_modules/fluent-ffmpeg/lib/options/videosize.js","../node_modules/fluent-ffmpeg/lib/options/output.js","../node_modules/fluent-ffmpeg/lib/options/custom.js","../node_modules/fluent-ffmpeg/lib/options/misc.js","../node_modules/fluent-ffmpeg/lib/processor.js","../node_modules/fluent-ffmpeg/lib/capabilities.js","../node_modules/fluent-ffmpeg/lib/ffprobe.js","../node_modules/fluent-ffmpeg/lib/recipes.js","../node_modules/fluent-ffmpeg/lib/fluent-ffmpeg.js","../node_modules/fluent-ffmpeg/index.js","../node_modules/stream-buffers/lib/constants.js","../node_modules/stream-buffers/lib/readable_streambuffer.js","../node_modules/stream-buffers/lib/writable_streambuffer.js","../node_modules/stream-buffers/lib/streambuffer.js","../src/index.ts","../src/main/creative-validator.ts","../src/strategies/backend/backend.strategy.ts","../src/strategies/backend/backend-image-validator.ts","../src/strategies/backend/backend-vast-validator.ts","../src/strategies/backend/backend-video-validator.ts","../src/utils/backend-video-analyser.ts","../src/strategies/frontend/frontend.strategy.ts","../src/strategies/frontend/frontend-image-validator.ts","../src/constants/image.constants.ts","../src/utils/utils.ts","../src/strategies/frontend/frontend-vast-validator.ts","../src/strategies/frontend/frontend-video-validator.ts"],"sourcesContent":["// Shim globals in esm bundle\nimport { fileURLToPath } from 'url'\nimport path from 'path'\n\nconst getFilename = () => fileURLToPath(import.meta.url)\nconst getDirname = () => path.dirname(getFilename())\n\nexport const __dirname = /* @__PURE__ */ getDirname()\nexport const __filename = /* @__PURE__ */ getFilename()\n","/*jshint node:true*/\n'use strict';\n\nvar exec = require('child_process').exec;\nvar isWindows = require('os').platform().match(/win(32|64)/);\nvar which = require('which');\n\nvar nlRegexp = /\\r\\n|\\r|\\n/g;\nvar streamRegexp = /^\\[?(.*?)\\]?$/;\nvar filterEscapeRegexp = /[,]/;\nvar whichCache = {};\n\n/**\n * Parse progress line from ffmpeg stderr\n *\n * @param {String} line progress line\n * @return progress object\n * @private\n */\nfunction parseProgressLine(line) {\n  var progress = {};\n\n  // Remove all spaces after = and trim\n  line  = line.replace(/=\\s+/g, '=').trim();\n  var progressParts = line.split(' ');\n\n  // Split every progress part by \"=\" to get key and value\n  for(var i = 0; i < progressParts.length; i++) {\n    var progressSplit = progressParts[i].split('=', 2);\n    var key = progressSplit[0];\n    var value = progressSplit[1];\n\n    // This is not a progress line\n    if(typeof value === 'undefined')\n      return null;\n\n    progress[key] = value;\n  }\n\n  return progress;\n}\n\n\nvar utils = module.exports = {\n  isWindows: isWindows,\n  streamRegexp: streamRegexp,\n\n\n  /**\n   * Copy an object keys into another one\n   *\n   * @param {Object} source source object\n   * @param {Object} dest destination object\n   * @private\n   */\n  copy: function(source, dest) {\n    Object.keys(source).forEach(function(key) {\n      dest[key] = source[key];\n    });\n  },\n\n\n  /**\n   * Create an argument list\n   *\n   * Returns a function that adds new arguments to the list.\n   * It also has the following methods:\n   * - clear() empties the argument list\n   * - get() returns the argument list\n   * - find(arg, count) finds 'arg' in the list and return the following 'count' items, or undefined if not found\n   * - remove(arg, count) remove 'arg' in the list as well as the following 'count' items\n   *\n   * @private\n   */\n  args: function() {\n    var list = [];\n\n    // Append argument(s) to the list\n    var argfunc = function() {\n      if (arguments.length === 1 && Array.isArray(arguments[0])) {\n        list = list.concat(arguments[0]);\n      } else {\n        list = list.concat([].slice.call(arguments));\n      }\n    };\n\n    // Clear argument list\n    argfunc.clear = function() {\n      list = [];\n    };\n\n    // Return argument list\n    argfunc.get = function() {\n      return list;\n    };\n\n    // Find argument 'arg' in list, and if found, return an array of the 'count' items that follow it\n    argfunc.find = function(arg, count) {\n      var index = list.indexOf(arg);\n      if (index !== -1) {\n        return list.slice(index + 1, index + 1 + (count || 0));\n      }\n    };\n\n    // Find argument 'arg' in list, and if found, remove it as well as the 'count' items that follow it\n    argfunc.remove = function(arg, count) {\n      var index = list.indexOf(arg);\n      if (index !== -1) {\n        list.splice(index, (count || 0) + 1);\n      }\n    };\n\n    // Clone argument list\n    argfunc.clone = function() {\n      var cloned = utils.args();\n      cloned(list);\n      return cloned;\n    };\n\n    return argfunc;\n  },\n\n\n  /**\n   * Generate filter strings\n   *\n   * @param {String[]|Object[]} filters filter specifications. When using objects,\n   *   each must have the following properties:\n   * @param {String} filters.filter filter name\n   * @param {String|Array} [filters.inputs] (array of) input stream specifier(s) for the filter,\n   *   defaults to ffmpeg automatically choosing the first unused matching streams\n   * @param {String|Array} [filters.outputs] (array of) output stream specifier(s) for the filter,\n   *   defaults to ffmpeg automatically assigning the output to the output file\n   * @param {Object|String|Array} [filters.options] filter options, can be omitted to not set any options\n   * @return String[]\n   * @private\n   */\n  makeFilterStrings: function(filters) {\n    return filters.map(function(filterSpec) {\n      if (typeof filterSpec === 'string') {\n        return filterSpec;\n      }\n\n      var filterString = '';\n\n      // Filter string format is:\n      // [input1][input2]...filter[output1][output2]...\n      // The 'filter' part can optionaly have arguments:\n      //   filter=arg1:arg2:arg3\n      //   filter=arg1=v1:arg2=v2:arg3=v3\n\n      // Add inputs\n      if (Array.isArray(filterSpec.inputs)) {\n        filterString += filterSpec.inputs.map(function(streamSpec) {\n          return streamSpec.replace(streamRegexp, '[$1]');\n        }).join('');\n      } else if (typeof filterSpec.inputs === 'string') {\n        filterString += filterSpec.inputs.replace(streamRegexp, '[$1]');\n      }\n\n      // Add filter\n      filterString += filterSpec.filter;\n\n      // Add options\n      if (filterSpec.options) {\n        if (typeof filterSpec.options === 'string' || typeof filterSpec.options === 'number') {\n          // Option string\n          filterString += '=' + filterSpec.options;\n        } else if (Array.isArray(filterSpec.options)) {\n          // Option array (unnamed options)\n          filterString += '=' + filterSpec.options.map(function(option) {\n            if (typeof option === 'string' && option.match(filterEscapeRegexp)) {\n              return '\\'' + option + '\\'';\n            } else {\n              return option;\n            }\n          }).join(':');\n        } else if (Object.keys(filterSpec.options).length) {\n          // Option object (named options)\n          filterString += '=' + Object.keys(filterSpec.options).map(function(option) {\n            var value = filterSpec.options[option];\n\n            if (typeof value === 'string' && value.match(filterEscapeRegexp)) {\n              value = '\\'' + value + '\\'';\n            }\n\n            return option + '=' + value;\n          }).join(':');\n        }\n      }\n\n      // Add outputs\n      if (Array.isArray(filterSpec.outputs)) {\n        filterString += filterSpec.outputs.map(function(streamSpec) {\n          return streamSpec.replace(streamRegexp, '[$1]');\n        }).join('');\n      } else if (typeof filterSpec.outputs === 'string') {\n        filterString += filterSpec.outputs.replace(streamRegexp, '[$1]');\n      }\n\n      return filterString;\n    });\n  },\n\n\n  /**\n   * Search for an executable\n   *\n   * Uses 'which' or 'where' depending on platform\n   *\n   * @param {String} name executable name\n   * @param {Function} callback callback with signature (err, path)\n   * @private\n   */\n  which: function(name, callback) {\n    if (name in whichCache) {\n      return callback(null, whichCache[name]);\n    }\n\n    which(name, function(err, result){\n      if (err) {\n        // Treat errors as not found\n        return callback(null, whichCache[name] = '');\n      }\n      callback(null, whichCache[name] = result);\n    });\n  },\n\n\n  /**\n   * Convert a [[hh:]mm:]ss[.xxx] timemark into seconds\n   *\n   * @param {String} timemark timemark string\n   * @return Number\n   * @private\n   */\n  timemarkToSeconds: function(timemark) {\n    if (typeof timemark === 'number') {\n      return timemark;\n    }\n\n    if (timemark.indexOf(':') === -1 && timemark.indexOf('.') >= 0) {\n      return Number(timemark);\n    }\n\n    var parts = timemark.split(':');\n\n    // add seconds\n    var secs = Number(parts.pop());\n\n    if (parts.length) {\n      // add minutes\n      secs += Number(parts.pop()) * 60;\n    }\n\n    if (parts.length) {\n      // add hours\n      secs += Number(parts.pop()) * 3600;\n    }\n\n    return secs;\n  },\n\n\n  /**\n   * Extract codec data from ffmpeg stderr and emit 'codecData' event if appropriate\n   * Call it with an initially empty codec object once with each line of stderr output until it returns true\n   *\n   * @param {FfmpegCommand} command event emitter\n   * @param {String} stderrLine ffmpeg stderr output line\n   * @param {Object} codecObject object used to accumulate codec data between calls\n   * @return {Boolean} true if codec data is complete (and event was emitted), false otherwise\n   * @private\n   */\n  extractCodecData: function(command, stderrLine, codecsObject) {\n    var inputPattern = /Input #[0-9]+, ([^ ]+),/;\n    var durPattern = /Duration\\: ([^,]+)/;\n    var audioPattern = /Audio\\: (.*)/;\n    var videoPattern = /Video\\: (.*)/;\n\n    if (!('inputStack' in codecsObject)) {\n      codecsObject.inputStack = [];\n      codecsObject.inputIndex = -1;\n      codecsObject.inInput = false;\n    }\n\n    var inputStack = codecsObject.inputStack;\n    var inputIndex = codecsObject.inputIndex;\n    var inInput = codecsObject.inInput;\n\n    var format, dur, audio, video;\n\n    if (format = stderrLine.match(inputPattern)) {\n      inInput = codecsObject.inInput = true;\n      inputIndex = codecsObject.inputIndex = codecsObject.inputIndex + 1;\n\n      inputStack[inputIndex] = { format: format[1], audio: '', video: '', duration: '' };\n    } else if (inInput && (dur = stderrLine.match(durPattern))) {\n      inputStack[inputIndex].duration = dur[1];\n    } else if (inInput && (audio = stderrLine.match(audioPattern))) {\n      audio = audio[1].split(', ');\n      inputStack[inputIndex].audio = audio[0];\n      inputStack[inputIndex].audio_details = audio;\n    } else if (inInput && (video = stderrLine.match(videoPattern))) {\n      video = video[1].split(', ');\n      inputStack[inputIndex].video = video[0];\n      inputStack[inputIndex].video_details = video;\n    } else if (/Output #\\d+/.test(stderrLine)) {\n      inInput = codecsObject.inInput = false;\n    } else if (/Stream mapping:|Press (\\[q\\]|ctrl-c) to stop/.test(stderrLine)) {\n      command.emit.apply(command, ['codecData'].concat(inputStack));\n      return true;\n    }\n\n    return false;\n  },\n\n\n  /**\n   * Extract progress data from ffmpeg stderr and emit 'progress' event if appropriate\n   *\n   * @param {FfmpegCommand} command event emitter\n   * @param {String} stderrLine ffmpeg stderr data\n   * @private\n   */\n  extractProgress: function(command, stderrLine) {\n    var progress = parseProgressLine(stderrLine);\n\n    if (progress) {\n      // build progress report object\n      var ret = {\n        frames: parseInt(progress.frame, 10),\n        currentFps: parseInt(progress.fps, 10),\n        currentKbps: progress.bitrate ? parseFloat(progress.bitrate.replace('kbits/s', '')) : 0,\n        targetSize: parseInt(progress.size || progress.Lsize, 10),\n        timemark: progress.time\n      };\n\n      // calculate percent progress using duration\n      if (command._ffprobeData && command._ffprobeData.format && command._ffprobeData.format.duration) {\n        var duration = Number(command._ffprobeData.format.duration);\n        if (!isNaN(duration))\n          ret.percent = (utils.timemarkToSeconds(ret.timemark) / duration) * 100;\n      }\n      command.emit('progress', ret);\n    }\n  },\n\n\n  /**\n   * Extract error message(s) from ffmpeg stderr\n   *\n   * @param {String} stderr ffmpeg stderr data\n   * @return {String}\n   * @private\n   */\n  extractError: function(stderr) {\n    // Only return the last stderr lines that don't start with a space or a square bracket\n    return stderr.split(nlRegexp).reduce(function(messages, message) {\n      if (message.charAt(0) === ' ' || message.charAt(0) === '[') {\n        return [];\n      } else {\n        messages.push(message);\n        return messages;\n      }\n    }, []).join('\\n');\n  },\n\n\n  /**\n   * Creates a line ring buffer object with the following methods:\n   * - append(str) : appends a string or buffer\n   * - get() : returns the whole string\n   * - close() : prevents further append() calls and does a last call to callbacks\n   * - callback(cb) : calls cb for each line (incl. those already in the ring)\n   *\n   * @param {Number} maxLines maximum number of lines to store (<= 0 for unlimited)\n   */\n  linesRing: function(maxLines) {\n    var cbs = [];\n    var lines = [];\n    var current = null;\n    var closed = false\n    var max = maxLines - 1;\n\n    function emit(line) {\n      cbs.forEach(function(cb) { cb(line); });\n    }\n\n    return {\n      callback: function(cb) {\n        lines.forEach(function(l) { cb(l); });\n        cbs.push(cb);\n      },\n\n      append: function(str) {\n        if (closed) return;\n        if (str instanceof Buffer) str = '' + str;\n        if (!str || str.length === 0) return;\n\n        var newLines = str.split(nlRegexp);\n\n        if (newLines.length === 1) {\n          if (current !== null) {\n            current = current + newLines.shift();\n          } else {\n            current = newLines.shift();\n          }\n        } else {\n          if (current !== null) {\n            current = current + newLines.shift();\n            emit(current);\n            lines.push(current);\n          }\n\n          current = newLines.pop();\n\n          newLines.forEach(function(l) {\n            emit(l);\n            lines.push(l);\n          });\n\n          if (max > -1 && lines.length > max) {\n            lines.splice(0, lines.length - max);\n          }\n        }\n      },\n\n      get: function() {\n        if (current !== null) {\n          return lines.concat([current]).join('\\n');\n        } else {\n          return lines.join('\\n');\n        }\n      },\n\n      close: function() {\n        if (closed) return;\n\n        if (current !== null) {\n          emit(current);\n          lines.push(current);\n\n          if (max > -1 && lines.length > max) {\n            lines.shift();\n          }\n\n          current = null;\n        }\n\n        closed = true;\n      }\n    };\n  }\n};\n","/*jshint node:true*/\n'use strict';\n\nvar utils = require('../utils');\n\n/*\n *! Input-related methods\n */\n\nmodule.exports = function(proto) {\n  /**\n   * Add an input to command\n   *\n   * Also switches \"current input\", that is the input that will be affected\n   * by subsequent input-related methods.\n   *\n   * Note: only one stream input is supported for now.\n   *\n   * @method FfmpegCommand#input\n   * @category Input\n   * @aliases mergeAdd,addInput\n   *\n   * @param {String|Readable} source input file path or readable stream\n   * @return FfmpegCommand\n   */\n  proto.mergeAdd =\n  proto.addInput =\n  proto.input = function(source) {\n    var isFile = false;\n    var isStream = false;\n\n    if (typeof source !== 'string') {\n      if (!('readable' in source) || !(source.readable)) {\n        throw new Error('Invalid input');\n      }\n\n      var hasInputStream = this._inputs.some(function(input) {\n        return input.isStream;\n      });\n\n      if (hasInputStream) {\n        throw new Error('Only one input stream is supported');\n      }\n\n      isStream = true;\n      source.pause();\n    } else {\n      var protocol = source.match(/^([a-z]{2,}):/i);\n      isFile = !protocol || protocol[0] === 'file';\n    }\n\n    this._inputs.push(this._currentInput = {\n      source: source,\n      isFile: isFile,\n      isStream: isStream,\n      options: utils.args()\n    });\n\n    return this;\n  };\n\n\n  /**\n   * Specify input format for the last specified input\n   *\n   * @method FfmpegCommand#inputFormat\n   * @category Input\n   * @aliases withInputFormat,fromFormat\n   *\n   * @param {String} format input format\n   * @return FfmpegCommand\n   */\n  proto.withInputFormat =\n  proto.inputFormat =\n  proto.fromFormat = function(format) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-f', format);\n    return this;\n  };\n\n\n  /**\n   * Specify input FPS for the last specified input\n   * (only valid for raw video formats)\n   *\n   * @method FfmpegCommand#inputFps\n   * @category Input\n   * @aliases withInputFps,withInputFPS,withFpsInput,withFPSInput,inputFPS,inputFps,fpsInput\n   *\n   * @param {Number} fps input FPS\n   * @return FfmpegCommand\n   */\n  proto.withInputFps =\n  proto.withInputFPS =\n  proto.withFpsInput =\n  proto.withFPSInput =\n  proto.inputFPS =\n  proto.inputFps =\n  proto.fpsInput =\n  proto.FPSInput = function(fps) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-r', fps);\n    return this;\n  };\n\n\n  /**\n   * Use native framerate for the last specified input\n   *\n   * @method FfmpegCommand#native\n   * @category Input\n   * @aliases nativeFramerate,withNativeFramerate\n   *\n   * @return FfmmegCommand\n   */\n  proto.nativeFramerate =\n  proto.withNativeFramerate =\n  proto.native = function() {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-re');\n    return this;\n  };\n\n\n  /**\n   * Specify input seek time for the last specified input\n   *\n   * @method FfmpegCommand#seekInput\n   * @category Input\n   * @aliases setStartTime,seekTo\n   *\n   * @param {String|Number} seek seek time in seconds or as a '[hh:[mm:]]ss[.xxx]' string\n   * @return FfmpegCommand\n   */\n  proto.setStartTime =\n  proto.seekInput = function(seek) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-ss', seek);\n\n    return this;\n  };\n\n\n  /**\n   * Loop over the last specified input\n   *\n   * @method FfmpegCommand#loop\n   * @category Input\n   *\n   * @param {String|Number} [duration] loop duration in seconds or as a '[[hh:]mm:]ss[.xxx]' string\n   * @return FfmpegCommand\n   */\n  proto.loop = function(duration) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-loop', '1');\n\n    if (typeof duration !== 'undefined') {\n      this.duration(duration);\n    }\n\n    return this;\n  };\n};\n","/*jshint node:true*/\n'use strict';\n\nvar utils = require('../utils');\n\n\n/*\n *! Audio-related methods\n */\n\nmodule.exports = function(proto) {\n  /**\n   * Disable audio in the output\n   *\n   * @method FfmpegCommand#noAudio\n   * @category Audio\n   * @aliases withNoAudio\n   * @return FfmpegCommand\n   */\n  proto.withNoAudio =\n  proto.noAudio = function() {\n    this._currentOutput.audio.clear();\n    this._currentOutput.audioFilters.clear();\n    this._currentOutput.audio('-an');\n\n    return this;\n  };\n\n\n  /**\n   * Specify audio codec\n   *\n   * @method FfmpegCommand#audioCodec\n   * @category Audio\n   * @aliases withAudioCodec\n   *\n   * @param {String} codec audio codec name\n   * @return FfmpegCommand\n   */\n  proto.withAudioCodec =\n  proto.audioCodec = function(codec) {\n    this._currentOutput.audio('-acodec', codec);\n\n    return this;\n  };\n\n\n  /**\n   * Specify audio bitrate\n   *\n   * @method FfmpegCommand#audioBitrate\n   * @category Audio\n   * @aliases withAudioBitrate\n   *\n   * @param {String|Number} bitrate audio bitrate in kbps (with an optional 'k' suffix)\n   * @return FfmpegCommand\n   */\n  proto.withAudioBitrate =\n  proto.audioBitrate = function(bitrate) {\n    this._currentOutput.audio('-b:a', ('' + bitrate).replace(/k?$/, 'k'));\n    return this;\n  };\n\n\n  /**\n   * Specify audio channel count\n   *\n   * @method FfmpegCommand#audioChannels\n   * @category Audio\n   * @aliases withAudioChannels\n   *\n   * @param {Number} channels channel count\n   * @return FfmpegCommand\n   */\n  proto.withAudioChannels =\n  proto.audioChannels = function(channels) {\n    this._currentOutput.audio('-ac', channels);\n    return this;\n  };\n\n\n  /**\n   * Specify audio frequency\n   *\n   * @method FfmpegCommand#audioFrequency\n   * @category Audio\n   * @aliases withAudioFrequency\n   *\n   * @param {Number} freq audio frequency in Hz\n   * @return FfmpegCommand\n   */\n  proto.withAudioFrequency =\n  proto.audioFrequency = function(freq) {\n    this._currentOutput.audio('-ar', freq);\n    return this;\n  };\n\n\n  /**\n   * Specify audio quality\n   *\n   * @method FfmpegCommand#audioQuality\n   * @category Audio\n   * @aliases withAudioQuality\n   *\n   * @param {Number} quality audio quality factor\n   * @return FfmpegCommand\n   */\n  proto.withAudioQuality =\n  proto.audioQuality = function(quality) {\n    this._currentOutput.audio('-aq', quality);\n    return this;\n  };\n\n\n  /**\n   * Specify custom audio filter(s)\n   *\n   * Can be called both with one or many filters, or a filter array.\n   *\n   * @example\n   * command.audioFilters('filter1');\n   *\n   * @example\n   * command.audioFilters('filter1', 'filter2=param1=value1:param2=value2');\n   *\n   * @example\n   * command.audioFilters(['filter1', 'filter2']);\n   *\n   * @example\n   * command.audioFilters([\n   *   {\n   *     filter: 'filter1'\n   *   },\n   *   {\n   *     filter: 'filter2',\n   *     options: 'param=value:param=value'\n   *   }\n   * ]);\n   *\n   * @example\n   * command.audioFilters(\n   *   {\n   *     filter: 'filter1',\n   *     options: ['value1', 'value2']\n   *   },\n   *   {\n   *     filter: 'filter2',\n   *     options: { param1: 'value1', param2: 'value2' }\n   *   }\n   * );\n   *\n   * @method FfmpegCommand#audioFilters\n   * @aliases withAudioFilter,withAudioFilters,audioFilter\n   * @category Audio\n   *\n   * @param {...String|String[]|Object[]} filters audio filter strings, string array or\n   *   filter specification array, each with the following properties:\n   * @param {String} filters.filter filter name\n   * @param {String|String[]|Object} [filters.options] filter option string, array, or object\n   * @return FfmpegCommand\n   */\n  proto.withAudioFilter =\n  proto.withAudioFilters =\n  proto.audioFilter =\n  proto.audioFilters = function(filters) {\n    if (arguments.length > 1) {\n      filters = [].slice.call(arguments);\n    }\n\n    if (!Array.isArray(filters)) {\n      filters = [filters];\n    }\n\n    this._currentOutput.audioFilters(utils.makeFilterStrings(filters));\n    return this;\n  };\n};\n","/*jshint node:true*/\n'use strict';\n\nvar utils = require('../utils');\n\n\n/*\n *! Video-related methods\n */\n\nmodule.exports = function(proto) {\n  /**\n   * Disable video in the output\n   *\n   * @method FfmpegCommand#noVideo\n   * @category Video\n   * @aliases withNoVideo\n   *\n   * @return FfmpegCommand\n   */\n  proto.withNoVideo =\n  proto.noVideo = function() {\n    this._currentOutput.video.clear();\n    this._currentOutput.videoFilters.clear();\n    this._currentOutput.video('-vn');\n\n    return this;\n  };\n\n\n  /**\n   * Specify video codec\n   *\n   * @method FfmpegCommand#videoCodec\n   * @category Video\n   * @aliases withVideoCodec\n   *\n   * @param {String} codec video codec name\n   * @return FfmpegCommand\n   */\n  proto.withVideoCodec =\n  proto.videoCodec = function(codec) {\n    this._currentOutput.video('-vcodec', codec);\n    return this;\n  };\n\n\n  /**\n   * Specify video bitrate\n   *\n   * @method FfmpegCommand#videoBitrate\n   * @category Video\n   * @aliases withVideoBitrate\n   *\n   * @param {String|Number} bitrate video bitrate in kbps (with an optional 'k' suffix)\n   * @param {Boolean} [constant=false] enforce constant bitrate\n   * @return FfmpegCommand\n   */\n  proto.withVideoBitrate =\n  proto.videoBitrate = function(bitrate, constant) {\n    bitrate = ('' + bitrate).replace(/k?$/, 'k');\n\n    this._currentOutput.video('-b:v', bitrate);\n    if (constant) {\n      this._currentOutput.video(\n        '-maxrate', bitrate,\n        '-minrate', bitrate,\n        '-bufsize', '3M'\n      );\n    }\n\n    return this;\n  };\n\n\n  /**\n   * Specify custom video filter(s)\n   *\n   * Can be called both with one or many filters, or a filter array.\n   *\n   * @example\n   * command.videoFilters('filter1');\n   *\n   * @example\n   * command.videoFilters('filter1', 'filter2=param1=value1:param2=value2');\n   *\n   * @example\n   * command.videoFilters(['filter1', 'filter2']);\n   *\n   * @example\n   * command.videoFilters([\n   *   {\n   *     filter: 'filter1'\n   *   },\n   *   {\n   *     filter: 'filter2',\n   *     options: 'param=value:param=value'\n   *   }\n   * ]);\n   *\n   * @example\n   * command.videoFilters(\n   *   {\n   *     filter: 'filter1',\n   *     options: ['value1', 'value2']\n   *   },\n   *   {\n   *     filter: 'filter2',\n   *     options: { param1: 'value1', param2: 'value2' }\n   *   }\n   * );\n   *\n   * @method FfmpegCommand#videoFilters\n   * @category Video\n   * @aliases withVideoFilter,withVideoFilters,videoFilter\n   *\n   * @param {...String|String[]|Object[]} filters video filter strings, string array or\n   *   filter specification array, each with the following properties:\n   * @param {String} filters.filter filter name\n   * @param {String|String[]|Object} [filters.options] filter option string, array, or object\n   * @return FfmpegCommand\n   */\n  proto.withVideoFilter =\n  proto.withVideoFilters =\n  proto.videoFilter =\n  proto.videoFilters = function(filters) {\n    if (arguments.length > 1) {\n      filters = [].slice.call(arguments);\n    }\n\n    if (!Array.isArray(filters)) {\n      filters = [filters];\n    }\n\n    this._currentOutput.videoFilters(utils.makeFilterStrings(filters));\n\n    return this;\n  };\n\n\n  /**\n   * Specify output FPS\n   *\n   * @method FfmpegCommand#fps\n   * @category Video\n   * @aliases withOutputFps,withOutputFPS,withFpsOutput,withFPSOutput,withFps,withFPS,outputFPS,outputFps,fpsOutput,FPSOutput,FPS\n   *\n   * @param {Number} fps output FPS\n   * @return FfmpegCommand\n   */\n  proto.withOutputFps =\n  proto.withOutputFPS =\n  proto.withFpsOutput =\n  proto.withFPSOutput =\n  proto.withFps =\n  proto.withFPS =\n  proto.outputFPS =\n  proto.outputFps =\n  proto.fpsOutput =\n  proto.FPSOutput =\n  proto.fps =\n  proto.FPS = function(fps) {\n    this._currentOutput.video('-r', fps);\n    return this;\n  };\n\n\n  /**\n   * Only transcode a certain number of frames\n   *\n   * @method FfmpegCommand#frames\n   * @category Video\n   * @aliases takeFrames,withFrames\n   *\n   * @param {Number} frames frame count\n   * @return FfmpegCommand\n   */\n  proto.takeFrames =\n  proto.withFrames =\n  proto.frames = function(frames) {\n    this._currentOutput.video('-vframes', frames);\n    return this;\n  };\n};\n","/*jshint node:true*/\n'use strict';\n\n/*\n *! Size helpers\n */\n\n\n/**\n * Return filters to pad video to width*height,\n *\n * @param {Number} width output width\n * @param {Number} height output height\n * @param {Number} aspect video aspect ratio (without padding)\n * @param {Number} color padding color\n * @return scale/pad filters\n * @private\n */\nfunction getScalePadFilters(width, height, aspect, color) {\n  /*\n    let a be the input aspect ratio, A be the requested aspect ratio\n\n    if a > A, padding is done on top and bottom\n    if a < A, padding is done on left and right\n   */\n\n  return [\n    /*\n      In both cases, we first have to scale the input to match the requested size.\n      When using computed width/height, we truncate them to multiples of 2\n     */\n    {\n      filter: 'scale',\n      options: {\n        w: 'if(gt(a,' + aspect + '),' + width + ',trunc(' + height + '*a/2)*2)',\n        h: 'if(lt(a,' + aspect + '),' + height + ',trunc(' + width + '/a/2)*2)'\n      }\n    },\n\n    /*\n      Then we pad the scaled input to match the target size\n      (here iw and ih refer to the padding input, i.e the scaled output)\n     */\n\n    {\n      filter: 'pad',\n      options: {\n        w: width,\n        h: height,\n        x: 'if(gt(a,' + aspect + '),0,(' + width + '-iw)/2)',\n        y: 'if(lt(a,' + aspect + '),0,(' + height + '-ih)/2)',\n        color: color\n      }\n    }\n  ];\n}\n\n\n/**\n * Recompute size filters\n *\n * @param {Object} output\n * @param {String} key newly-added parameter name ('size', 'aspect' or 'pad')\n * @param {String} value newly-added parameter value\n * @return filter string array\n * @private\n */\nfunction createSizeFilters(output, key, value) {\n  // Store parameters\n  var data = output.sizeData = output.sizeData || {};\n  data[key] = value;\n\n  if (!('size' in data)) {\n    // No size requested, keep original size\n    return [];\n  }\n\n  // Try to match the different size string formats\n  var fixedSize = data.size.match(/([0-9]+)x([0-9]+)/);\n  var fixedWidth = data.size.match(/([0-9]+)x\\?/);\n  var fixedHeight = data.size.match(/\\?x([0-9]+)/);\n  var percentRatio = data.size.match(/\\b([0-9]{1,3})%/);\n  var width, height, aspect;\n\n  if (percentRatio) {\n    var ratio = Number(percentRatio[1]) / 100;\n    return [{\n      filter: 'scale',\n      options: {\n        w: 'trunc(iw*' + ratio + '/2)*2',\n        h: 'trunc(ih*' + ratio + '/2)*2'\n      }\n    }];\n  } else if (fixedSize) {\n    // Round target size to multiples of 2\n    width = Math.round(Number(fixedSize[1]) / 2) * 2;\n    height = Math.round(Number(fixedSize[2]) / 2) * 2;\n\n    aspect = width / height;\n\n    if (data.pad) {\n      return getScalePadFilters(width, height, aspect, data.pad);\n    } else {\n      // No autopad requested, rescale to target size\n      return [{ filter: 'scale', options: { w: width, h: height }}];\n    }\n  } else if (fixedWidth || fixedHeight) {\n    if ('aspect' in data) {\n      // Specified aspect ratio\n      width = fixedWidth ? fixedWidth[1] : Math.round(Number(fixedHeight[1]) * data.aspect);\n      height = fixedHeight ? fixedHeight[1] : Math.round(Number(fixedWidth[1]) / data.aspect);\n\n      // Round to multiples of 2\n      width = Math.round(width / 2) * 2;\n      height = Math.round(height / 2) * 2;\n\n      if (data.pad) {\n        return getScalePadFilters(width, height, data.aspect, data.pad);\n      } else {\n        // No autopad requested, rescale to target size\n        return [{ filter: 'scale', options: { w: width, h: height }}];\n      }\n    } else {\n      // Keep input aspect ratio\n\n      if (fixedWidth) {\n        return [{\n          filter: 'scale',\n          options: {\n            w: Math.round(Number(fixedWidth[1]) / 2) * 2,\n            h: 'trunc(ow/a/2)*2'\n          }\n        }];\n      } else {\n        return [{\n          filter: 'scale',\n          options: {\n            w: 'trunc(oh*a/2)*2',\n            h: Math.round(Number(fixedHeight[1]) / 2) * 2\n          }\n        }];\n      }\n    }\n  } else {\n    throw new Error('Invalid size specified: ' + data.size);\n  }\n}\n\n\n/*\n *! Video size-related methods\n */\n\nmodule.exports = function(proto) {\n  /**\n   * Keep display aspect ratio\n   *\n   * This method is useful when converting an input with non-square pixels to an output format\n   * that does not support non-square pixels.  It rescales the input so that the display aspect\n   * ratio is the same.\n   *\n   * @method FfmpegCommand#keepDAR\n   * @category Video size\n   * @aliases keepPixelAspect,keepDisplayAspect,keepDisplayAspectRatio\n   *\n   * @return FfmpegCommand\n   */\n  proto.keepPixelAspect = // Only for compatibility, this is not about keeping _pixel_ aspect ratio\n  proto.keepDisplayAspect =\n  proto.keepDisplayAspectRatio =\n  proto.keepDAR = function() {\n    return this.videoFilters([\n      {\n        filter: 'scale',\n        options: {\n          w: 'if(gt(sar,1),iw*sar,iw)',\n          h: 'if(lt(sar,1),ih/sar,ih)'\n        }\n      },\n      {\n        filter: 'setsar',\n        options: '1'\n      }\n    ]);\n  };\n\n\n  /**\n   * Set output size\n   *\n   * The 'size' parameter can have one of 4 forms:\n   * - 'X%': rescale to xx % of the original size\n   * - 'WxH': specify width and height\n   * - 'Wx?': specify width and compute height from input aspect ratio\n   * - '?xH': specify height and compute width from input aspect ratio\n   *\n   * Note: both dimensions will be truncated to multiples of 2.\n   *\n   * @method FfmpegCommand#size\n   * @category Video size\n   * @aliases withSize,setSize\n   *\n   * @param {String} size size string, eg. '33%', '320x240', '320x?', '?x240'\n   * @return FfmpegCommand\n   */\n  proto.withSize =\n  proto.setSize =\n  proto.size = function(size) {\n    var filters = createSizeFilters(this._currentOutput, 'size', size);\n\n    this._currentOutput.sizeFilters.clear();\n    this._currentOutput.sizeFilters(filters);\n\n    return this;\n  };\n\n\n  /**\n   * Set output aspect ratio\n   *\n   * @method FfmpegCommand#aspect\n   * @category Video size\n   * @aliases withAspect,withAspectRatio,setAspect,setAspectRatio,aspectRatio\n   *\n   * @param {String|Number} aspect aspect ratio (number or 'X:Y' string)\n   * @return FfmpegCommand\n   */\n  proto.withAspect =\n  proto.withAspectRatio =\n  proto.setAspect =\n  proto.setAspectRatio =\n  proto.aspect =\n  proto.aspectRatio = function(aspect) {\n    var a = Number(aspect);\n    if (isNaN(a)) {\n      var match = aspect.match(/^(\\d+):(\\d+)$/);\n      if (match) {\n        a = Number(match[1]) / Number(match[2]);\n      } else {\n        throw new Error('Invalid aspect ratio: ' + aspect);\n      }\n    }\n\n    var filters = createSizeFilters(this._currentOutput, 'aspect', a);\n\n    this._currentOutput.sizeFilters.clear();\n    this._currentOutput.sizeFilters(filters);\n\n    return this;\n  };\n\n\n  /**\n   * Enable auto-padding the output\n   *\n   * @method FfmpegCommand#autopad\n   * @category Video size\n   * @aliases applyAutopadding,applyAutoPadding,applyAutopad,applyAutoPad,withAutopadding,withAutoPadding,withAutopad,withAutoPad,autoPad\n   *\n   * @param {Boolean} [pad=true] enable/disable auto-padding\n   * @param {String} [color='black'] pad color\n   */\n  proto.applyAutopadding =\n  proto.applyAutoPadding =\n  proto.applyAutopad =\n  proto.applyAutoPad =\n  proto.withAutopadding =\n  proto.withAutoPadding =\n  proto.withAutopad =\n  proto.withAutoPad =\n  proto.autoPad =\n  proto.autopad = function(pad, color) {\n    // Allow autopad(color)\n    if (typeof pad === 'string') {\n      color = pad;\n      pad = true;\n    }\n\n    // Allow autopad() and autopad(undefined, color)\n    if (typeof pad === 'undefined') {\n      pad = true;\n    }\n\n    var filters = createSizeFilters(this._currentOutput, 'pad', pad ? color || 'black' : false);\n\n    this._currentOutput.sizeFilters.clear();\n    this._currentOutput.sizeFilters(filters);\n\n    return this;\n  };\n};\n","/*jshint node:true*/\n'use strict';\n\nvar utils = require('../utils');\n\n\n/*\n *! Output-related methods\n */\n\nmodule.exports = function(proto) {\n  /**\n   * Add output\n   *\n   * @method FfmpegCommand#output\n   * @category Output\n   * @aliases addOutput\n   *\n   * @param {String|Writable} target target file path or writable stream\n   * @param {Object} [pipeopts={}] pipe options (only applies to streams)\n   * @return FfmpegCommand\n   */\n  proto.addOutput =\n  proto.output = function(target, pipeopts) {\n    var isFile = false;\n\n    if (!target && this._currentOutput) {\n      // No target is only allowed when called from constructor\n      throw new Error('Invalid output');\n    }\n\n    if (target && typeof target !== 'string') {\n      if (!('writable' in target) || !(target.writable)) {\n        throw new Error('Invalid output');\n      }\n    } else if (typeof target === 'string') {\n      var protocol = target.match(/^([a-z]{2,}):/i);\n      isFile = !protocol || protocol[0] === 'file';\n    }\n\n    if (target && !('target' in this._currentOutput)) {\n      // For backwards compatibility, set target for first output\n      this._currentOutput.target = target;\n      this._currentOutput.isFile = isFile;\n      this._currentOutput.pipeopts = pipeopts || {};\n    } else {\n      if (target && typeof target !== 'string') {\n        var hasOutputStream = this._outputs.some(function(output) {\n          return typeof output.target !== 'string';\n        });\n\n        if (hasOutputStream) {\n          throw new Error('Only one output stream is supported');\n        }\n      }\n\n      this._outputs.push(this._currentOutput = {\n        target: target,\n        isFile: isFile,\n        flags: {},\n        pipeopts: pipeopts || {}\n      });\n\n      var self = this;\n      ['audio', 'audioFilters', 'video', 'videoFilters', 'sizeFilters', 'options'].forEach(function(key) {\n        self._currentOutput[key] = utils.args();\n      });\n\n      if (!target) {\n        // Call from constructor: remove target key\n        delete this._currentOutput.target;\n      }\n    }\n\n    return this;\n  };\n\n\n  /**\n   * Specify output seek time\n   *\n   * @method FfmpegCommand#seek\n   * @category Input\n   * @aliases seekOutput\n   *\n   * @param {String|Number} seek seek time in seconds or as a '[hh:[mm:]]ss[.xxx]' string\n   * @return FfmpegCommand\n   */\n  proto.seekOutput =\n  proto.seek = function(seek) {\n    this._currentOutput.options('-ss', seek);\n    return this;\n  };\n\n\n  /**\n   * Set output duration\n   *\n   * @method FfmpegCommand#duration\n   * @category Output\n   * @aliases withDuration,setDuration\n   *\n   * @param {String|Number} duration duration in seconds or as a '[[hh:]mm:]ss[.xxx]' string\n   * @return FfmpegCommand\n   */\n  proto.withDuration =\n  proto.setDuration =\n  proto.duration = function(duration) {\n    this._currentOutput.options('-t', duration);\n    return this;\n  };\n\n\n  /**\n   * Set output format\n   *\n   * @method FfmpegCommand#format\n   * @category Output\n   * @aliases toFormat,withOutputFormat,outputFormat\n   *\n   * @param {String} format output format name\n   * @return FfmpegCommand\n   */\n  proto.toFormat =\n  proto.withOutputFormat =\n  proto.outputFormat =\n  proto.format = function(format) {\n    this._currentOutput.options('-f', format);\n    return this;\n  };\n\n\n  /**\n   * Add stream mapping to output\n   *\n   * @method FfmpegCommand#map\n   * @category Output\n   *\n   * @param {String} spec stream specification string, with optional square brackets\n   * @return FfmpegCommand\n   */\n  proto.map = function(spec) {\n    this._currentOutput.options('-map', spec.replace(utils.streamRegexp, '[$1]'));\n    return this;\n  };\n\n\n  /**\n   * Run flvtool2/flvmeta on output\n   *\n   * @method FfmpegCommand#flvmeta\n   * @category Output\n   * @aliases updateFlvMetadata\n   *\n   * @return FfmpegCommand\n   */\n  proto.updateFlvMetadata =\n  proto.flvmeta = function() {\n    this._currentOutput.flags.flvmeta = true;\n    return this;\n  };\n};\n","/*jshint node:true*/\n'use strict';\n\nvar utils = require('../utils');\n\n\n/*\n *! Custom options methods\n */\n\nmodule.exports = function(proto) {\n  /**\n   * Add custom input option(s)\n   *\n   * When passing a single string or an array, each string containing two\n   * words is split (eg. inputOptions('-option value') is supported) for\n   * compatibility reasons.  This is not the case when passing more than\n   * one argument.\n   *\n   * @example\n   * command.inputOptions('option1');\n   *\n   * @example\n   * command.inputOptions('option1', 'option2');\n   *\n   * @example\n   * command.inputOptions(['option1', 'option2']);\n   *\n   * @method FfmpegCommand#inputOptions\n   * @category Custom options\n   * @aliases addInputOption,addInputOptions,withInputOption,withInputOptions,inputOption\n   *\n   * @param {...String} options option string(s) or string array\n   * @return FfmpegCommand\n   */\n  proto.addInputOption =\n  proto.addInputOptions =\n  proto.withInputOption =\n  proto.withInputOptions =\n  proto.inputOption =\n  proto.inputOptions = function(options) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    var doSplit = true;\n\n    if (arguments.length > 1) {\n      options = [].slice.call(arguments);\n      doSplit = false;\n    }\n\n    if (!Array.isArray(options)) {\n      options = [options];\n    }\n\n    this._currentInput.options(options.reduce(function(options, option) {\n      var split = String(option).split(' ');\n\n      if (doSplit && split.length === 2) {\n        options.push(split[0], split[1]);\n      } else {\n        options.push(option);\n      }\n\n      return options;\n    }, []));\n    return this;\n  };\n\n\n  /**\n   * Add custom output option(s)\n   *\n   * @example\n   * command.outputOptions('option1');\n   *\n   * @example\n   * command.outputOptions('option1', 'option2');\n   *\n   * @example\n   * command.outputOptions(['option1', 'option2']);\n   *\n   * @method FfmpegCommand#outputOptions\n   * @category Custom options\n   * @aliases addOutputOption,addOutputOptions,addOption,addOptions,withOutputOption,withOutputOptions,withOption,withOptions,outputOption\n   *\n   * @param {...String} options option string(s) or string array\n   * @return FfmpegCommand\n   */\n  proto.addOutputOption =\n  proto.addOutputOptions =\n  proto.addOption =\n  proto.addOptions =\n  proto.withOutputOption =\n  proto.withOutputOptions =\n  proto.withOption =\n  proto.withOptions =\n  proto.outputOption =\n  proto.outputOptions = function(options) {\n    var doSplit = true;\n\n    if (arguments.length > 1) {\n      options = [].slice.call(arguments);\n      doSplit = false;\n    }\n\n    if (!Array.isArray(options)) {\n      options = [options];\n    }\n\n    this._currentOutput.options(options.reduce(function(options, option) {\n      var split = String(option).split(' ');\n\n      if (doSplit && split.length === 2) {\n        options.push(split[0], split[1]);\n      } else {\n        options.push(option);\n      }\n\n      return options;\n    }, []));\n    return this;\n  };\n\n\n  /**\n   * Specify a complex filtergraph\n   *\n   * Calling this method will override any previously set filtergraph, but you can set\n   * as many filters as needed in one call.\n   *\n   * @example <caption>Overlay an image over a video (using a filtergraph string)</caption>\n   *   ffmpeg()\n   *     .input('video.avi')\n   *     .input('image.png')\n   *     .complexFilter('[0:v][1:v]overlay[out]', ['out']);\n   *\n   * @example <caption>Overlay an image over a video (using a filter array)</caption>\n   *   ffmpeg()\n   *     .input('video.avi')\n   *     .input('image.png')\n   *     .complexFilter([{\n   *       filter: 'overlay',\n   *       inputs: ['0:v', '1:v'],\n   *       outputs: ['out']\n   *     }], ['out']);\n   *\n   * @example <caption>Split video into RGB channels and output a 3x1 video with channels side to side</caption>\n   *  ffmpeg()\n   *    .input('video.avi')\n   *    .complexFilter([\n   *      // Duplicate video stream 3 times into streams a, b, and c\n   *      { filter: 'split', options: '3', outputs: ['a', 'b', 'c'] },\n   *\n   *      // Create stream 'red' by cancelling green and blue channels from stream 'a'\n   *      { filter: 'lutrgb', options: { g: 0, b: 0 }, inputs: 'a', outputs: 'red' },\n   *\n   *      // Create stream 'green' by cancelling red and blue channels from stream 'b'\n   *      { filter: 'lutrgb', options: { r: 0, b: 0 }, inputs: 'b', outputs: 'green' },\n   *\n   *      // Create stream 'blue' by cancelling red and green channels from stream 'c'\n   *      { filter: 'lutrgb', options: { r: 0, g: 0 }, inputs: 'c', outputs: 'blue' },\n   *\n   *      // Pad stream 'red' to 3x width, keeping the video on the left, and name output 'padded'\n   *      { filter: 'pad', options: { w: 'iw*3', h: 'ih' }, inputs: 'red', outputs: 'padded' },\n   *\n   *      // Overlay 'green' onto 'padded', moving it to the center, and name output 'redgreen'\n   *      { filter: 'overlay', options: { x: 'w', y: 0 }, inputs: ['padded', 'green'], outputs: 'redgreen'},\n   *\n   *      // Overlay 'blue' onto 'redgreen', moving it to the right\n   *      { filter: 'overlay', options: { x: '2*w', y: 0 }, inputs: ['redgreen', 'blue']},\n   *    ]);\n   *\n   * @method FfmpegCommand#complexFilter\n   * @category Custom options\n   * @aliases filterGraph\n   *\n   * @param {String|Array} spec filtergraph string or array of filter specification\n   *   objects, each having the following properties:\n   * @param {String} spec.filter filter name\n   * @param {String|Array} [spec.inputs] (array of) input stream specifier(s) for the filter,\n   *   defaults to ffmpeg automatically choosing the first unused matching streams\n   * @param {String|Array} [spec.outputs] (array of) output stream specifier(s) for the filter,\n   *   defaults to ffmpeg automatically assigning the output to the output file\n   * @param {Object|String|Array} [spec.options] filter options, can be omitted to not set any options\n   * @param {Array} [map] (array of) stream specifier(s) from the graph to include in\n   *   ffmpeg output, defaults to ffmpeg automatically choosing the first matching streams.\n   * @return FfmpegCommand\n   */\n  proto.filterGraph =\n  proto.complexFilter = function(spec, map) {\n    this._complexFilters.clear();\n\n    if (!Array.isArray(spec)) {\n      spec = [spec];\n    }\n\n    this._complexFilters('-filter_complex', utils.makeFilterStrings(spec).join(';'));\n\n    if (Array.isArray(map)) {\n      var self = this;\n      map.forEach(function(streamSpec) {\n        self._complexFilters('-map', streamSpec.replace(utils.streamRegexp, '[$1]'));\n      });\n    } else if (typeof map === 'string') {\n      this._complexFilters('-map', map.replace(utils.streamRegexp, '[$1]'));\n    }\n\n    return this;\n  };\n};\n","/*jshint node:true*/\n'use strict';\n\nvar path = require('path');\n\n/*\n *! Miscellaneous methods\n */\n\nmodule.exports = function(proto) {\n  /**\n   * Use preset\n   *\n   * @method FfmpegCommand#preset\n   * @category Miscellaneous\n   * @aliases usingPreset\n   *\n   * @param {String|Function} preset preset name or preset function\n   */\n  proto.usingPreset =\n  proto.preset = function(preset) {\n    if (typeof preset === 'function') {\n      preset(this);\n    } else {\n      try {\n        var modulePath = path.join(this.options.presets, preset);\n        var module = require(modulePath);\n\n        if (typeof module.load === 'function') {\n          module.load(this);\n        } else {\n          throw new Error('preset ' + modulePath + ' has no load() function');\n        }\n      } catch (err) {\n        throw new Error('preset ' + modulePath + ' could not be loaded: ' + err.message);\n      }\n    }\n\n    return this;\n  };\n};\n","/*jshint node:true*/\n'use strict';\n\nvar spawn = require('child_process').spawn;\nvar path = require('path');\nvar fs = require('fs');\nvar async = require('async');\nvar utils = require('./utils');\n\n/*\n *! Processor methods\n */\n\n\n/**\n * Run ffprobe asynchronously and store data in command\n *\n * @param {FfmpegCommand} command\n * @private\n */\nfunction runFfprobe(command) {\n  const inputProbeIndex = 0;\n  if (command._inputs[inputProbeIndex].isStream) {\n    // Don't probe input streams as this will consume them\n    return;\n  }\n  command.ffprobe(inputProbeIndex, function(err, data) {\n    command._ffprobeData = data;\n  });\n}\n\n\nmodule.exports = function(proto) {\n  /**\n   * Emitted just after ffmpeg has been spawned.\n   *\n   * @event FfmpegCommand#start\n   * @param {String} command ffmpeg command line\n   */\n\n  /**\n   * Emitted when ffmpeg reports progress information\n   *\n   * @event FfmpegCommand#progress\n   * @param {Object} progress progress object\n   * @param {Number} progress.frames number of frames transcoded\n   * @param {Number} progress.currentFps current processing speed in frames per second\n   * @param {Number} progress.currentKbps current output generation speed in kilobytes per second\n   * @param {Number} progress.targetSize current output file size\n   * @param {String} progress.timemark current video timemark\n   * @param {Number} [progress.percent] processing progress (may not be available depending on input)\n   */\n\n  /**\n   * Emitted when ffmpeg outputs to stderr\n   *\n   * @event FfmpegCommand#stderr\n   * @param {String} line stderr output line\n   */\n\n  /**\n   * Emitted when ffmpeg reports input codec data\n   *\n   * @event FfmpegCommand#codecData\n   * @param {Object} codecData codec data object\n   * @param {String} codecData.format input format name\n   * @param {String} codecData.audio input audio codec name\n   * @param {String} codecData.audio_details input audio codec parameters\n   * @param {String} codecData.video input video codec name\n   * @param {String} codecData.video_details input video codec parameters\n   */\n\n  /**\n   * Emitted when an error happens when preparing or running a command\n   *\n   * @event FfmpegCommand#error\n   * @param {Error} error error object, with optional properties 'inputStreamError' / 'outputStreamError' for errors on their respective streams\n   * @param {String|null} stdout ffmpeg stdout, unless outputting to a stream\n   * @param {String|null} stderr ffmpeg stderr\n   */\n\n  /**\n   * Emitted when a command finishes processing\n   *\n   * @event FfmpegCommand#end\n   * @param {Array|String|null} [filenames|stdout] generated filenames when taking screenshots, ffmpeg stdout when not outputting to a stream, null otherwise\n   * @param {String|null} stderr ffmpeg stderr\n   */\n\n\n  /**\n   * Spawn an ffmpeg process\n   *\n   * The 'options' argument may contain the following keys:\n   * - 'niceness': specify process niceness, ignored on Windows (default: 0)\n   * - `cwd`: change working directory\n   * - 'captureStdout': capture stdout and pass it to 'endCB' as its 2nd argument (default: false)\n   * - 'stdoutLines': override command limit (default: use command limit)\n   *\n   * The 'processCB' callback, if present, is called as soon as the process is created and\n   * receives a nodejs ChildProcess object.  It may not be called at all if an error happens\n   * before spawning the process.\n   *\n   * The 'endCB' callback is called either when an error occurs or when the ffmpeg process finishes.\n   *\n   * @method FfmpegCommand#_spawnFfmpeg\n   * @param {Array} args ffmpeg command line argument list\n   * @param {Object} [options] spawn options (see above)\n   * @param {Function} [processCB] callback called with process object and stdout/stderr ring buffers when process has been created\n   * @param {Function} endCB callback called with error (if applicable) and stdout/stderr ring buffers when process finished\n   * @private\n   */\n  proto._spawnFfmpeg = function(args, options, processCB, endCB) {\n    // Enable omitting options\n    if (typeof options === 'function') {\n      endCB = processCB;\n      processCB = options;\n      options = {};\n    }\n\n    // Enable omitting processCB\n    if (typeof endCB === 'undefined') {\n      endCB = processCB;\n      processCB = function() {};\n    }\n\n    var maxLines = 'stdoutLines' in options ? options.stdoutLines : this.options.stdoutLines;\n\n    // Find ffmpeg\n    this._getFfmpegPath(function(err, command) {\n      if (err) {\n        return endCB(err);\n      } else if (!command || command.length === 0) {\n        return endCB(new Error('Cannot find ffmpeg'));\n      }\n\n      // Apply niceness\n      if (options.niceness && options.niceness !== 0 && !utils.isWindows) {\n        args.unshift('-n', options.niceness, command);\n        command = 'nice';\n      }\n\n      var stdoutRing = utils.linesRing(maxLines);\n      var stdoutClosed = false;\n\n      var stderrRing = utils.linesRing(maxLines);\n      var stderrClosed = false;\n\n      // Spawn process\n      var ffmpegProc = spawn(command, args, options);\n\n      if (ffmpegProc.stderr) {\n        ffmpegProc.stderr.setEncoding('utf8');\n      }\n\n      ffmpegProc.on('error', function(err) {\n        endCB(err);\n      });\n\n      // Ensure we wait for captured streams to end before calling endCB\n      var exitError = null;\n      function handleExit(err) {\n        if (err) {\n          exitError = err;\n        }\n\n        if (processExited && (stdoutClosed || !options.captureStdout) && stderrClosed) {\n          endCB(exitError, stdoutRing, stderrRing);\n        }\n      }\n\n      // Handle process exit\n      var processExited = false;\n      ffmpegProc.on('exit', function(code, signal) {\n        processExited = true;\n\n        if (signal) {\n          handleExit(new Error('ffmpeg was killed with signal ' + signal));\n        } else if (code) {\n          handleExit(new Error('ffmpeg exited with code ' + code));\n        } else {\n          handleExit();\n        }\n      });\n\n      // Capture stdout if specified\n      if (options.captureStdout) {\n        ffmpegProc.stdout.on('data', function(data) {\n          stdoutRing.append(data);\n        });\n\n        ffmpegProc.stdout.on('close', function() {\n          stdoutRing.close();\n          stdoutClosed = true;\n          handleExit();\n        });\n      }\n\n      // Capture stderr if specified\n      ffmpegProc.stderr.on('data', function(data) {\n        stderrRing.append(data);\n      });\n\n      ffmpegProc.stderr.on('close', function() {\n        stderrRing.close();\n        stderrClosed = true;\n        handleExit();\n      });\n\n      // Call process callback\n      processCB(ffmpegProc, stdoutRing, stderrRing);\n    });\n  };\n\n\n  /**\n   * Build the argument list for an ffmpeg command\n   *\n   * @method FfmpegCommand#_getArguments\n   * @return argument list\n   * @private\n   */\n  proto._getArguments = function() {\n    var complexFilters = this._complexFilters.get();\n\n    var fileOutput = this._outputs.some(function(output) {\n      return output.isFile;\n    });\n\n    return [].concat(\n        // Inputs and input options\n        this._inputs.reduce(function(args, input) {\n          var source = (typeof input.source === 'string') ? input.source : 'pipe:0';\n\n          // For each input, add input options, then '-i <source>'\n          return args.concat(\n            input.options.get(),\n            ['-i', source]\n          );\n        }, []),\n\n        // Global options\n        this._global.get(),\n\n        // Overwrite if we have file outputs\n        fileOutput ? ['-y'] : [],\n\n        // Complex filters\n        complexFilters,\n\n        // Outputs, filters and output options\n        this._outputs.reduce(function(args, output) {\n          var sizeFilters = utils.makeFilterStrings(output.sizeFilters.get());\n          var audioFilters = output.audioFilters.get();\n          var videoFilters = output.videoFilters.get().concat(sizeFilters);\n          var outputArg;\n\n          if (!output.target) {\n            outputArg = [];\n          } else if (typeof output.target === 'string') {\n            outputArg = [output.target];\n          } else {\n            outputArg = ['pipe:1'];\n          }\n\n          return args.concat(\n            output.audio.get(),\n            audioFilters.length ? ['-filter:a', audioFilters.join(',')] : [],\n            output.video.get(),\n            videoFilters.length ? ['-filter:v', videoFilters.join(',')] : [],\n            output.options.get(),\n            outputArg\n          );\n        }, [])\n      );\n  };\n\n\n  /**\n   * Prepare execution of an ffmpeg command\n   *\n   * Checks prerequisites for the execution of the command (codec/format availability, flvtool...),\n   * then builds the argument list for ffmpeg and pass them to 'callback'.\n   *\n   * @method FfmpegCommand#_prepare\n   * @param {Function} callback callback with signature (err, args)\n   * @param {Boolean} [readMetadata=false] read metadata before processing\n   * @private\n   */\n  proto._prepare = function(callback, readMetadata) {\n    var self = this;\n\n    async.waterfall([\n      // Check codecs and formats\n      function(cb) {\n        self._checkCapabilities(cb);\n      },\n\n      // Read metadata if required\n      function(cb) {\n        if (!readMetadata) {\n          return cb();\n        }\n\n        self.ffprobe(0, function(err, data) {\n          if (!err) {\n            self._ffprobeData = data;\n          }\n\n          cb();\n        });\n      },\n\n      // Check for flvtool2/flvmeta if necessary\n      function(cb) {\n        var flvmeta = self._outputs.some(function(output) {\n          // Remove flvmeta flag on non-file output\n          if (output.flags.flvmeta && !output.isFile) {\n            self.logger.warn('Updating flv metadata is only supported for files');\n            output.flags.flvmeta = false;\n          }\n\n          return output.flags.flvmeta;\n        });\n\n        if (flvmeta) {\n          self._getFlvtoolPath(function(err) {\n            cb(err);\n          });\n        } else {\n          cb();\n        }\n      },\n\n      // Build argument list\n      function(cb) {\n        var args;\n        try {\n          args = self._getArguments();\n        } catch(e) {\n          return cb(e);\n        }\n\n        cb(null, args);\n      },\n\n      // Add \"-strict experimental\" option where needed\n      function(args, cb) {\n        self.availableEncoders(function(err, encoders) {\n          for (var i = 0; i < args.length; i++) {\n            if (args[i] === '-acodec' || args[i] === '-vcodec') {\n              i++;\n\n              if ((args[i] in encoders) && encoders[args[i]].experimental) {\n                args.splice(i + 1, 0, '-strict', 'experimental');\n                i += 2;\n              }\n            }\n          }\n\n          cb(null, args);\n        });\n      }\n    ], callback);\n\n    if (!readMetadata) {\n      // Read metadata as soon as 'progress' listeners are added\n\n      if (this.listeners('progress').length > 0) {\n        // Read metadata in parallel\n        runFfprobe(this);\n      } else {\n        // Read metadata as soon as the first 'progress' listener is added\n        this.once('newListener', function(event) {\n          if (event === 'progress') {\n            runFfprobe(this);\n          }\n        });\n      }\n    }\n  };\n\n\n  /**\n   * Run ffmpeg command\n   *\n   * @method FfmpegCommand#run\n   * @category Processing\n   * @aliases exec,execute\n   */\n  proto.exec =\n  proto.execute =\n  proto.run = function() {\n    var self = this;\n\n    // Check if at least one output is present\n    var outputPresent = this._outputs.some(function(output) {\n      return 'target' in output;\n    });\n\n    if (!outputPresent) {\n      throw new Error('No output specified');\n    }\n\n    // Get output stream if any\n    var outputStream = this._outputs.filter(function(output) {\n      return typeof output.target !== 'string';\n    })[0];\n\n    // Get input stream if any\n    var inputStream = this._inputs.filter(function(input) {\n      return typeof input.source !== 'string';\n    })[0];\n\n    // Ensure we send 'end' or 'error' only once\n    var ended = false;\n    function emitEnd(err, stdout, stderr) {\n      if (!ended) {\n        ended = true;\n\n        if (err) {\n          self.emit('error', err, stdout, stderr);\n        } else {\n          self.emit('end', stdout, stderr);\n        }\n      }\n    }\n\n    self._prepare(function(err, args) {\n      if (err) {\n        return emitEnd(err);\n      }\n\n      // Run ffmpeg\n      self._spawnFfmpeg(\n        args,\n        {\n          captureStdout: !outputStream,\n          niceness: self.options.niceness,\n          cwd: self.options.cwd,\n          windowsHide: true\n        }, \n\n        function processCB(ffmpegProc, stdoutRing, stderrRing) {\n          self.ffmpegProc = ffmpegProc;\n          self.emit('start', 'ffmpeg ' + args.join(' '));\n\n          // Pipe input stream if any\n          if (inputStream) {\n            inputStream.source.on('error', function(err) {\n              var reportingErr = new Error('Input stream error: ' + err.message);\n              reportingErr.inputStreamError = err;\n              emitEnd(reportingErr);\n              ffmpegProc.kill();\n            });\n\n            inputStream.source.resume();\n            inputStream.source.pipe(ffmpegProc.stdin);\n\n            // Set stdin error handler on ffmpeg (prevents nodejs catching the error, but\n            // ffmpeg will fail anyway, so no need to actually handle anything)\n            ffmpegProc.stdin.on('error', function() {});\n          }\n\n          // Setup timeout if requested\n          if (self.options.timeout) {\n            self.processTimer = setTimeout(function() {\n              var msg = 'process ran into a timeout (' + self.options.timeout + 's)';\n\n              emitEnd(new Error(msg), stdoutRing.get(), stderrRing.get());\n              ffmpegProc.kill();\n            }, self.options.timeout * 1000);\n          }\n\n\n          if (outputStream) {\n            // Pipe ffmpeg stdout to output stream\n            ffmpegProc.stdout.pipe(outputStream.target, outputStream.pipeopts);\n\n            // Handle output stream events\n            outputStream.target.on('close', function() {\n              self.logger.debug('Output stream closed, scheduling kill for ffmpeg process');\n\n              // Don't kill process yet, to give a chance to ffmpeg to\n              // terminate successfully first  This is necessary because\n              // under load, the process 'exit' event sometimes happens\n              // after the output stream 'close' event.\n              setTimeout(function() {\n                emitEnd(new Error('Output stream closed'));\n                ffmpegProc.kill();\n              }, 20);\n            });\n\n            outputStream.target.on('error', function(err) {\n              self.logger.debug('Output stream error, killing ffmpeg process');\n              var reportingErr = new Error('Output stream error: ' + err.message);\n              reportingErr.outputStreamError = err;\n              emitEnd(reportingErr, stdoutRing.get(), stderrRing.get());\n              ffmpegProc.kill('SIGKILL');\n            });\n          }\n\n          // Setup stderr handling\n          if (stderrRing) {\n\n            // 'stderr' event\n            if (self.listeners('stderr').length) {\n              stderrRing.callback(function(line) {\n                self.emit('stderr', line);\n              });\n            }\n\n            // 'codecData' event\n            if (self.listeners('codecData').length) {\n              var codecDataSent = false;\n              var codecObject = {};\n\n              stderrRing.callback(function(line) {\n                if (!codecDataSent)\n                  codecDataSent = utils.extractCodecData(self, line, codecObject);\n              });\n            }\n\n            // 'progress' event\n            if (self.listeners('progress').length) {\n              stderrRing.callback(function(line) {\n                utils.extractProgress(self, line);\n              });\n            }\n          }\n        },\n\n        function endCB(err, stdoutRing, stderrRing) {\n          clearTimeout(self.processTimer);\n          delete self.ffmpegProc;\n\n          if (err) {\n            if (err.message.match(/ffmpeg exited with code/)) {\n              // Add ffmpeg error message\n              err.message += ': ' + utils.extractError(stderrRing.get());\n            }\n\n            emitEnd(err, stdoutRing.get(), stderrRing.get());\n          } else {\n            // Find out which outputs need flv metadata\n            var flvmeta = self._outputs.filter(function(output) {\n              return output.flags.flvmeta;\n            });\n\n            if (flvmeta.length) {\n              self._getFlvtoolPath(function(err, flvtool) {\n                if (err) {\n                  return emitEnd(err);\n                }\n\n                async.each(\n                  flvmeta,\n                  function(output, cb) {\n                    spawn(flvtool, ['-U', output.target], {windowsHide: true})\n                      .on('error', function(err) {\n                        cb(new Error('Error running ' + flvtool + ' on ' + output.target + ': ' + err.message));\n                      })\n                      .on('exit', function(code, signal) {\n                        if (code !== 0 || signal) {\n                          cb(\n                            new Error(flvtool + ' ' +\n                              (signal ? 'received signal ' + signal\n                                      : 'exited with code ' + code)) +\n                              ' when running on ' + output.target\n                          );\n                        } else {\n                          cb();\n                        }\n                      });\n                  },\n                  function(err) {\n                    if (err) {\n                      emitEnd(err);\n                    } else {\n                      emitEnd(null, stdoutRing.get(), stderrRing.get());\n                    }\n                  }\n                );\n              });\n            } else {\n              emitEnd(null, stdoutRing.get(), stderrRing.get());\n            }\n          }\n        }\n      );\n    });\n\n    return this;\n  };\n\n\n  /**\n   * Renice current and/or future ffmpeg processes\n   *\n   * Ignored on Windows platforms.\n   *\n   * @method FfmpegCommand#renice\n   * @category Processing\n   *\n   * @param {Number} [niceness=0] niceness value between -20 (highest priority) and 20 (lowest priority)\n   * @return FfmpegCommand\n   */\n  proto.renice = function(niceness) {\n    if (!utils.isWindows) {\n      niceness = niceness || 0;\n\n      if (niceness < -20 || niceness > 20) {\n        this.logger.warn('Invalid niceness value: ' + niceness + ', must be between -20 and 20');\n      }\n\n      niceness = Math.min(20, Math.max(-20, niceness));\n      this.options.niceness = niceness;\n\n      if (this.ffmpegProc) {\n        var logger = this.logger;\n        var pid = this.ffmpegProc.pid;\n        var renice = spawn('renice', [niceness, '-p', pid], {windowsHide: true});\n\n        renice.on('error', function(err) {\n          logger.warn('could not renice process ' + pid + ': ' + err.message);\n        });\n\n        renice.on('exit', function(code, signal) {\n          if (signal) {\n            logger.warn('could not renice process ' + pid + ': renice was killed by signal ' + signal);\n          } else if (code) {\n            logger.warn('could not renice process ' + pid + ': renice exited with ' + code);\n          } else {\n            logger.info('successfully reniced process ' + pid + ' to ' + niceness + ' niceness');\n          }\n        });\n      }\n    }\n\n    return this;\n  };\n\n\n  /**\n   * Kill current ffmpeg process, if any\n   *\n   * @method FfmpegCommand#kill\n   * @category Processing\n   *\n   * @param {String} [signal=SIGKILL] signal name\n   * @return FfmpegCommand\n   */\n  proto.kill = function(signal) {\n    if (!this.ffmpegProc) {\n      this.logger.warn('No running ffmpeg process, cannot send signal');\n    } else {\n      this.ffmpegProc.kill(signal || 'SIGKILL');\n    }\n\n    return this;\n  };\n};\n","/*jshint node:true*/\n'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar async = require('async');\nvar utils = require('./utils');\n\n/*\n *! Capability helpers\n */\n\nvar avCodecRegexp = /^\\s*([D ])([E ])([VAS])([S ])([D ])([T ]) ([^ ]+) +(.*)$/;\nvar ffCodecRegexp = /^\\s*([D\\.])([E\\.])([VAS])([I\\.])([L\\.])([S\\.]) ([^ ]+) +(.*)$/;\nvar ffEncodersRegexp = /\\(encoders:([^\\)]+)\\)/;\nvar ffDecodersRegexp = /\\(decoders:([^\\)]+)\\)/;\nvar encodersRegexp = /^\\s*([VAS\\.])([F\\.])([S\\.])([X\\.])([B\\.])([D\\.]) ([^ ]+) +(.*)$/;\nvar formatRegexp = /^\\s*([D ])([E ])\\s+([^ ]+)\\s+(.*)$/;\nvar lineBreakRegexp = /\\r\\n|\\r|\\n/;\nvar filterRegexp = /^(?: [T\\.][S\\.][C\\.] )?([^ ]+) +(AA?|VV?|\\|)->(AA?|VV?|\\|) +(.*)$/;\n\nvar cache = {};\n\nmodule.exports = function(proto) {\n  /**\n   * Manually define the ffmpeg binary full path.\n   *\n   * @method FfmpegCommand#setFfmpegPath\n   *\n   * @param {String} ffmpegPath The full path to the ffmpeg binary.\n   * @return FfmpegCommand\n   */\n  proto.setFfmpegPath = function(ffmpegPath) {\n    cache.ffmpegPath = ffmpegPath;\n    return this;\n  };\n\n  /**\n   * Manually define the ffprobe binary full path.\n   *\n   * @method FfmpegCommand#setFfprobePath\n   *\n   * @param {String} ffprobePath The full path to the ffprobe binary.\n   * @return FfmpegCommand\n   */\n  proto.setFfprobePath = function(ffprobePath) {\n    cache.ffprobePath = ffprobePath;\n    return this;\n  };\n\n  /**\n   * Manually define the flvtool2/flvmeta binary full path.\n   *\n   * @method FfmpegCommand#setFlvtoolPath\n   *\n   * @param {String} flvtool The full path to the flvtool2 or flvmeta binary.\n   * @return FfmpegCommand\n   */\n  proto.setFlvtoolPath = function(flvtool) {\n    cache.flvtoolPath = flvtool;\n    return this;\n  };\n\n  /**\n   * Forget executable paths\n   *\n   * (only used for testing purposes)\n   *\n   * @method FfmpegCommand#_forgetPaths\n   * @private\n   */\n  proto._forgetPaths = function() {\n    delete cache.ffmpegPath;\n    delete cache.ffprobePath;\n    delete cache.flvtoolPath;\n  };\n\n  /**\n   * Check for ffmpeg availability\n   *\n   * If the FFMPEG_PATH environment variable is set, try to use it.\n   * If it is unset or incorrect, try to find ffmpeg in the PATH instead.\n   *\n   * @method FfmpegCommand#_getFfmpegPath\n   * @param {Function} callback callback with signature (err, path)\n   * @private\n   */\n  proto._getFfmpegPath = function(callback) {\n    if ('ffmpegPath' in cache) {\n      return callback(null, cache.ffmpegPath);\n    }\n\n    async.waterfall([\n      // Try FFMPEG_PATH\n      function(cb) {\n        if (process.env.FFMPEG_PATH) {\n          fs.exists(process.env.FFMPEG_PATH, function(exists) {\n            if (exists) {\n              cb(null, process.env.FFMPEG_PATH);\n            } else {\n              cb(null, '');\n            }\n          });\n        } else {\n          cb(null, '');\n        }\n      },\n\n      // Search in the PATH\n      function(ffmpeg, cb) {\n        if (ffmpeg.length) {\n          return cb(null, ffmpeg);\n        }\n\n        utils.which('ffmpeg', function(err, ffmpeg) {\n          cb(err, ffmpeg);\n        });\n      }\n    ], function(err, ffmpeg) {\n      if (err) {\n        callback(err);\n      } else {\n        callback(null, cache.ffmpegPath = (ffmpeg || ''));\n      }\n    });\n  };\n\n\n  /**\n   * Check for ffprobe availability\n   *\n   * If the FFPROBE_PATH environment variable is set, try to use it.\n   * If it is unset or incorrect, try to find ffprobe in the PATH instead.\n   * If this still fails, try to find ffprobe in the same directory as ffmpeg.\n   *\n   * @method FfmpegCommand#_getFfprobePath\n   * @param {Function} callback callback with signature (err, path)\n   * @private\n   */\n  proto._getFfprobePath = function(callback) {\n    var self = this;\n\n    if ('ffprobePath' in cache) {\n      return callback(null, cache.ffprobePath);\n    }\n\n    async.waterfall([\n      // Try FFPROBE_PATH\n      function(cb) {\n        if (process.env.FFPROBE_PATH) {\n          fs.exists(process.env.FFPROBE_PATH, function(exists) {\n            cb(null, exists ? process.env.FFPROBE_PATH : '');\n          });\n        } else {\n          cb(null, '');\n        }\n      },\n\n      // Search in the PATH\n      function(ffprobe, cb) {\n        if (ffprobe.length) {\n          return cb(null, ffprobe);\n        }\n\n        utils.which('ffprobe', function(err, ffprobe) {\n          cb(err, ffprobe);\n        });\n      },\n\n      // Search in the same directory as ffmpeg\n      function(ffprobe, cb) {\n        if (ffprobe.length) {\n          return cb(null, ffprobe);\n        }\n\n        self._getFfmpegPath(function(err, ffmpeg) {\n          if (err) {\n            cb(err);\n          } else if (ffmpeg.length) {\n            var name = utils.isWindows ? 'ffprobe.exe' : 'ffprobe';\n            var ffprobe = path.join(path.dirname(ffmpeg), name);\n            fs.exists(ffprobe, function(exists) {\n              cb(null, exists ? ffprobe : '');\n            });\n          } else {\n            cb(null, '');\n          }\n        });\n      }\n    ], function(err, ffprobe) {\n      if (err) {\n        callback(err);\n      } else {\n        callback(null, cache.ffprobePath = (ffprobe || ''));\n      }\n    });\n  };\n\n\n  /**\n   * Check for flvtool2/flvmeta availability\n   *\n   * If the FLVTOOL2_PATH or FLVMETA_PATH environment variable are set, try to use them.\n   * If both are either unset or incorrect, try to find flvtool2 or flvmeta in the PATH instead.\n   *\n   * @method FfmpegCommand#_getFlvtoolPath\n   * @param {Function} callback callback with signature (err, path)\n   * @private\n   */\n   proto._getFlvtoolPath = function(callback) {\n    if ('flvtoolPath' in cache) {\n      return callback(null, cache.flvtoolPath);\n    }\n\n    async.waterfall([\n      // Try FLVMETA_PATH\n      function(cb) {\n        if (process.env.FLVMETA_PATH) {\n          fs.exists(process.env.FLVMETA_PATH, function(exists) {\n            cb(null, exists ? process.env.FLVMETA_PATH : '');\n          });\n        } else {\n          cb(null, '');\n        }\n      },\n\n      // Try FLVTOOL2_PATH\n      function(flvtool, cb) {\n        if (flvtool.length) {\n          return cb(null, flvtool);\n        }\n\n        if (process.env.FLVTOOL2_PATH) {\n          fs.exists(process.env.FLVTOOL2_PATH, function(exists) {\n            cb(null, exists ? process.env.FLVTOOL2_PATH : '');\n          });\n        } else {\n          cb(null, '');\n        }\n      },\n\n      // Search for flvmeta in the PATH\n      function(flvtool, cb) {\n        if (flvtool.length) {\n          return cb(null, flvtool);\n        }\n\n        utils.which('flvmeta', function(err, flvmeta) {\n          cb(err, flvmeta);\n        });\n      },\n\n      // Search for flvtool2 in the PATH\n      function(flvtool, cb) {\n        if (flvtool.length) {\n          return cb(null, flvtool);\n        }\n\n        utils.which('flvtool2', function(err, flvtool2) {\n          cb(err, flvtool2);\n        });\n      },\n    ], function(err, flvtool) {\n      if (err) {\n        callback(err);\n      } else {\n        callback(null, cache.flvtoolPath = (flvtool || ''));\n      }\n    });\n  };\n\n\n  /**\n   * A callback passed to {@link FfmpegCommand#availableFilters}.\n   *\n   * @callback FfmpegCommand~filterCallback\n   * @param {Error|null} err error object or null if no error happened\n   * @param {Object} filters filter object with filter names as keys and the following\n   *   properties for each filter:\n   * @param {String} filters.description filter description\n   * @param {String} filters.input input type, one of 'audio', 'video' and 'none'\n   * @param {Boolean} filters.multipleInputs whether the filter supports multiple inputs\n   * @param {String} filters.output output type, one of 'audio', 'video' and 'none'\n   * @param {Boolean} filters.multipleOutputs whether the filter supports multiple outputs\n   */\n\n  /**\n   * Query ffmpeg for available filters\n   *\n   * @method FfmpegCommand#availableFilters\n   * @category Capabilities\n   * @aliases getAvailableFilters\n   *\n   * @param {FfmpegCommand~filterCallback} callback callback function\n   */\n  proto.availableFilters =\n  proto.getAvailableFilters = function(callback) {\n    if ('filters' in cache) {\n      return callback(null, cache.filters);\n    }\n\n    this._spawnFfmpeg(['-filters'], { captureStdout: true, stdoutLines: 0 }, function (err, stdoutRing) {\n      if (err) {\n        return callback(err);\n      }\n\n      var stdout = stdoutRing.get();\n      var lines = stdout.split('\\n');\n      var data = {};\n      var types = { A: 'audio', V: 'video', '|': 'none' };\n\n      lines.forEach(function(line) {\n        var match = line.match(filterRegexp);\n        if (match) {\n          data[match[1]] = {\n            description: match[4],\n            input: types[match[2].charAt(0)],\n            multipleInputs: match[2].length > 1,\n            output: types[match[3].charAt(0)],\n            multipleOutputs: match[3].length > 1\n          };\n        }\n      });\n\n      callback(null, cache.filters = data);\n    });\n  };\n\n\n  /**\n   * A callback passed to {@link FfmpegCommand#availableCodecs}.\n   *\n   * @callback FfmpegCommand~codecCallback\n   * @param {Error|null} err error object or null if no error happened\n   * @param {Object} codecs codec object with codec names as keys and the following\n   *   properties for each codec (more properties may be available depending on the\n   *   ffmpeg version used):\n   * @param {String} codecs.description codec description\n   * @param {Boolean} codecs.canDecode whether the codec is able to decode streams\n   * @param {Boolean} codecs.canEncode whether the codec is able to encode streams\n   */\n\n  /**\n   * Query ffmpeg for available codecs\n   *\n   * @method FfmpegCommand#availableCodecs\n   * @category Capabilities\n   * @aliases getAvailableCodecs\n   *\n   * @param {FfmpegCommand~codecCallback} callback callback function\n   */\n  proto.availableCodecs =\n  proto.getAvailableCodecs = function(callback) {\n    if ('codecs' in cache) {\n      return callback(null, cache.codecs);\n    }\n\n    this._spawnFfmpeg(['-codecs'], { captureStdout: true, stdoutLines: 0 }, function(err, stdoutRing) {\n      if (err) {\n        return callback(err);\n      }\n\n      var stdout = stdoutRing.get();\n      var lines = stdout.split(lineBreakRegexp);\n      var data = {};\n\n      lines.forEach(function(line) {\n        var match = line.match(avCodecRegexp);\n        if (match && match[7] !== '=') {\n          data[match[7]] = {\n            type: { 'V': 'video', 'A': 'audio', 'S': 'subtitle' }[match[3]],\n            description: match[8],\n            canDecode: match[1] === 'D',\n            canEncode: match[2] === 'E',\n            drawHorizBand: match[4] === 'S',\n            directRendering: match[5] === 'D',\n            weirdFrameTruncation: match[6] === 'T'\n          };\n        }\n\n        match = line.match(ffCodecRegexp);\n        if (match && match[7] !== '=') {\n          var codecData = data[match[7]] = {\n            type: { 'V': 'video', 'A': 'audio', 'S': 'subtitle' }[match[3]],\n            description: match[8],\n            canDecode: match[1] === 'D',\n            canEncode: match[2] === 'E',\n            intraFrameOnly: match[4] === 'I',\n            isLossy: match[5] === 'L',\n            isLossless: match[6] === 'S'\n          };\n\n          var encoders = codecData.description.match(ffEncodersRegexp);\n          encoders = encoders ? encoders[1].trim().split(' ') : [];\n\n          var decoders = codecData.description.match(ffDecodersRegexp);\n          decoders = decoders ? decoders[1].trim().split(' ') : [];\n\n          if (encoders.length || decoders.length) {\n            var coderData = {};\n            utils.copy(codecData, coderData);\n            delete coderData.canEncode;\n            delete coderData.canDecode;\n\n            encoders.forEach(function(name) {\n              data[name] = {};\n              utils.copy(coderData, data[name]);\n              data[name].canEncode = true;\n            });\n\n            decoders.forEach(function(name) {\n              if (name in data) {\n                data[name].canDecode = true;\n              } else {\n                data[name] = {};\n                utils.copy(coderData, data[name]);\n                data[name].canDecode = true;\n              }\n            });\n          }\n        }\n      });\n\n      callback(null, cache.codecs = data);\n    });\n  };\n\n\n  /**\n   * A callback passed to {@link FfmpegCommand#availableEncoders}.\n   *\n   * @callback FfmpegCommand~encodersCallback\n   * @param {Error|null} err error object or null if no error happened\n   * @param {Object} encoders encoders object with encoder names as keys and the following\n   *   properties for each encoder:\n   * @param {String} encoders.description codec description\n   * @param {Boolean} encoders.type \"audio\", \"video\" or \"subtitle\"\n   * @param {Boolean} encoders.frameMT whether the encoder is able to do frame-level multithreading\n   * @param {Boolean} encoders.sliceMT whether the encoder is able to do slice-level multithreading\n   * @param {Boolean} encoders.experimental whether the encoder is experimental\n   * @param {Boolean} encoders.drawHorizBand whether the encoder supports draw_horiz_band\n   * @param {Boolean} encoders.directRendering whether the encoder supports direct encoding method 1\n   */\n\n  /**\n   * Query ffmpeg for available encoders\n   *\n   * @method FfmpegCommand#availableEncoders\n   * @category Capabilities\n   * @aliases getAvailableEncoders\n   *\n   * @param {FfmpegCommand~encodersCallback} callback callback function\n   */\n  proto.availableEncoders =\n  proto.getAvailableEncoders = function(callback) {\n    if ('encoders' in cache) {\n      return callback(null, cache.encoders);\n    }\n\n    this._spawnFfmpeg(['-encoders'], { captureStdout: true, stdoutLines: 0 }, function(err, stdoutRing) {\n      if (err) {\n        return callback(err);\n      }\n\n      var stdout = stdoutRing.get();\n      var lines = stdout.split(lineBreakRegexp);\n      var data = {};\n\n      lines.forEach(function(line) {\n        var match = line.match(encodersRegexp);\n        if (match && match[7] !== '=') {\n          data[match[7]] = {\n            type: { 'V': 'video', 'A': 'audio', 'S': 'subtitle' }[match[1]],\n            description: match[8],\n            frameMT: match[2] === 'F',\n            sliceMT: match[3] === 'S',\n            experimental: match[4] === 'X',\n            drawHorizBand: match[5] === 'B',\n            directRendering: match[6] === 'D'\n          };\n        }\n      });\n\n      callback(null, cache.encoders = data);\n    });\n  };\n\n\n  /**\n   * A callback passed to {@link FfmpegCommand#availableFormats}.\n   *\n   * @callback FfmpegCommand~formatCallback\n   * @param {Error|null} err error object or null if no error happened\n   * @param {Object} formats format object with format names as keys and the following\n   *   properties for each format:\n   * @param {String} formats.description format description\n   * @param {Boolean} formats.canDemux whether the format is able to demux streams from an input file\n   * @param {Boolean} formats.canMux whether the format is able to mux streams into an output file\n   */\n\n  /**\n   * Query ffmpeg for available formats\n   *\n   * @method FfmpegCommand#availableFormats\n   * @category Capabilities\n   * @aliases getAvailableFormats\n   *\n   * @param {FfmpegCommand~formatCallback} callback callback function\n   */\n  proto.availableFormats =\n  proto.getAvailableFormats = function(callback) {\n    if ('formats' in cache) {\n      return callback(null, cache.formats);\n    }\n\n    // Run ffmpeg -formats\n    this._spawnFfmpeg(['-formats'], { captureStdout: true, stdoutLines: 0 }, function (err, stdoutRing) {\n      if (err) {\n        return callback(err);\n      }\n\n      // Parse output\n      var stdout = stdoutRing.get();\n      var lines = stdout.split(lineBreakRegexp);\n      var data = {};\n\n      lines.forEach(function(line) {\n        var match = line.match(formatRegexp);\n        if (match) {\n          match[3].split(',').forEach(function(format) {\n            if (!(format in data)) {\n              data[format] = {\n                description: match[4],\n                canDemux: false,\n                canMux: false\n              };\n            }\n\n            if (match[1] === 'D') {\n              data[format].canDemux = true;\n            }\n            if (match[2] === 'E') {\n              data[format].canMux = true;\n            }\n          });\n        }\n      });\n\n      callback(null, cache.formats = data);\n    });\n  };\n\n\n  /**\n   * Check capabilities before executing a command\n   *\n   * Checks whether all used codecs and formats are indeed available\n   *\n   * @method FfmpegCommand#_checkCapabilities\n   * @param {Function} callback callback with signature (err)\n   * @private\n   */\n  proto._checkCapabilities = function(callback) {\n    var self = this;\n    async.waterfall([\n      // Get available formats\n      function(cb) {\n        self.availableFormats(cb);\n      },\n\n      // Check whether specified formats are available\n      function(formats, cb) {\n        var unavailable;\n\n        // Output format(s)\n        unavailable = self._outputs\n          .reduce(function(fmts, output) {\n            var format = output.options.find('-f', 1);\n            if (format) {\n              if (!(format[0] in formats) || !(formats[format[0]].canMux)) {\n                fmts.push(format);\n              }\n            }\n\n            return fmts;\n          }, []);\n\n        if (unavailable.length === 1) {\n          return cb(new Error('Output format ' + unavailable[0] + ' is not available'));\n        } else if (unavailable.length > 1) {\n          return cb(new Error('Output formats ' + unavailable.join(', ') + ' are not available'));\n        }\n\n        // Input format(s)\n        unavailable = self._inputs\n          .reduce(function(fmts, input) {\n            var format = input.options.find('-f', 1);\n            if (format) {\n              if (!(format[0] in formats) || !(formats[format[0]].canDemux)) {\n                fmts.push(format[0]);\n              }\n            }\n\n            return fmts;\n          }, []);\n\n        if (unavailable.length === 1) {\n          return cb(new Error('Input format ' + unavailable[0] + ' is not available'));\n        } else if (unavailable.length > 1) {\n          return cb(new Error('Input formats ' + unavailable.join(', ') + ' are not available'));\n        }\n\n        cb();\n      },\n\n      // Get available codecs\n      function(cb) {\n        self.availableEncoders(cb);\n      },\n\n      // Check whether specified codecs are available and add strict experimental options if needed\n      function(encoders, cb) {\n        var unavailable;\n\n        // Audio codec(s)\n        unavailable = self._outputs.reduce(function(cdcs, output) {\n          var acodec = output.audio.find('-acodec', 1);\n          if (acodec && acodec[0] !== 'copy') {\n            if (!(acodec[0] in encoders) || encoders[acodec[0]].type !== 'audio') {\n              cdcs.push(acodec[0]);\n            }\n          }\n\n          return cdcs;\n        }, []);\n\n        if (unavailable.length === 1) {\n          return cb(new Error('Audio codec ' + unavailable[0] + ' is not available'));\n        } else if (unavailable.length > 1) {\n          return cb(new Error('Audio codecs ' + unavailable.join(', ') + ' are not available'));\n        }\n\n        // Video codec(s)\n        unavailable = self._outputs.reduce(function(cdcs, output) {\n          var vcodec = output.video.find('-vcodec', 1);\n          if (vcodec && vcodec[0] !== 'copy') {\n            if (!(vcodec[0] in encoders) || encoders[vcodec[0]].type !== 'video') {\n              cdcs.push(vcodec[0]);\n            }\n          }\n\n          return cdcs;\n        }, []);\n\n        if (unavailable.length === 1) {\n          return cb(new Error('Video codec ' + unavailable[0] + ' is not available'));\n        } else if (unavailable.length > 1) {\n          return cb(new Error('Video codecs ' + unavailable.join(', ') + ' are not available'));\n        }\n\n        cb();\n      }\n    ], callback);\n  };\n};\n","/*jshint node:true, laxcomma:true*/\n'use strict';\n\nvar spawn = require('child_process').spawn;\n\n\nfunction legacyTag(key) { return key.match(/^TAG:/); }\nfunction legacyDisposition(key) { return key.match(/^DISPOSITION:/); }\n\nfunction parseFfprobeOutput(out) {\n  var lines = out.split(/\\r\\n|\\r|\\n/);\n\n  lines = lines.filter(function (line) {\n    return line.length > 0;\n  });\n\n  var data = {\n    streams: [],\n    format: {},\n    chapters: []\n  };\n\n  function parseBlock(name) {\n    var data = {};\n\n    var line = lines.shift();\n    while (typeof line !== 'undefined') {\n      if (line.toLowerCase() == '[/'+name+']') {\n        return data;\n      } else if (line.match(/^\\[/)) {\n        line = lines.shift();\n        continue;\n      }\n\n      var kv = line.match(/^([^=]+)=(.*)$/);\n      if (kv) {\n        if (!(kv[1].match(/^TAG:/)) && kv[2].match(/^[0-9]+(\\.[0-9]+)?$/)) {\n          data[kv[1]] = Number(kv[2]);\n        } else {\n          data[kv[1]] = kv[2];\n        }\n      }\n\n      line = lines.shift();\n    }\n\n    return data;\n  }\n\n  var line = lines.shift();\n  while (typeof line !== 'undefined') {\n    if (line.match(/^\\[stream/i)) {\n      var stream = parseBlock('stream');\n      data.streams.push(stream);\n    } else if (line.match(/^\\[chapter/i)) {\n      var chapter = parseBlock('chapter');\n      data.chapters.push(chapter);\n    } else if (line.toLowerCase() === '[format]') {\n      data.format = parseBlock('format');\n    }\n\n    line = lines.shift();\n  }\n\n  return data;\n}\n\n\n\nmodule.exports = function(proto) {\n  /**\n   * A callback passed to the {@link FfmpegCommand#ffprobe} method.\n   *\n   * @callback FfmpegCommand~ffprobeCallback\n   *\n   * @param {Error|null} err error object or null if no error happened\n   * @param {Object} ffprobeData ffprobe output data; this object\n   *   has the same format as what the following command returns:\n   *\n   *     `ffprobe -print_format json -show_streams -show_format INPUTFILE`\n   * @param {Array} ffprobeData.streams stream information\n   * @param {Object} ffprobeData.format format information\n   */\n\n  /**\n   * Run ffprobe on last specified input\n   *\n   * @method FfmpegCommand#ffprobe\n   * @category Metadata\n   *\n   * @param {?Number} [index] 0-based index of input to probe (defaults to last input)\n   * @param {?String[]} [options] array of output options to return\n   * @param {FfmpegCommand~ffprobeCallback} callback callback function\n   *\n   */\n  proto.ffprobe = function() {\n    var input, index = null, options = [], callback;\n\n    // the last argument should be the callback\n    var callback = arguments[arguments.length - 1];\n\n    var ended = false\n    function handleCallback(err, data) {\n      if (!ended) {\n        ended = true;\n        callback(err, data);\n      }\n    };\n\n    // map the arguments to the correct variable names\n    switch (arguments.length) {\n      case 3:\n        index = arguments[0];\n        options = arguments[1];\n        break;\n      case 2:\n        if (typeof arguments[0] === 'number') {\n          index = arguments[0];\n        } else if (Array.isArray(arguments[0])) {\n          options = arguments[0];\n        }\n        break;\n    }\n\n\n    if (index === null) {\n      if (!this._currentInput) {\n        return handleCallback(new Error('No input specified'));\n      }\n\n      input = this._currentInput;\n    } else {\n      input = this._inputs[index];\n\n      if (!input) {\n        return handleCallback(new Error('Invalid input index'));\n      }\n    }\n\n    // Find ffprobe\n    this._getFfprobePath(function(err, path) {\n      if (err) {\n        return handleCallback(err);\n      } else if (!path) {\n        return handleCallback(new Error('Cannot find ffprobe'));\n      }\n\n      var stdout = '';\n      var stdoutClosed = false;\n      var stderr = '';\n      var stderrClosed = false;\n\n      // Spawn ffprobe\n      var src = input.isStream ? 'pipe:0' : input.source;\n      var ffprobe = spawn(path, ['-show_streams', '-show_format'].concat(options, src), {windowsHide: true});\n\n      if (input.isStream) {\n        // Skip errors on stdin. These get thrown when ffprobe is complete and\n        // there seems to be no way hook in and close stdin before it throws.\n        ffprobe.stdin.on('error', function(err) {\n          if (['ECONNRESET', 'EPIPE', 'EOF'].indexOf(err.code) >= 0) { return; }\n          handleCallback(err);\n        });\n\n        // Once ffprobe's input stream closes, we need no more data from the\n        // input\n        ffprobe.stdin.on('close', function() {\n            input.source.pause();\n            input.source.unpipe(ffprobe.stdin);\n        });\n\n        input.source.pipe(ffprobe.stdin);\n      }\n\n      ffprobe.on('error', callback);\n\n      // Ensure we wait for captured streams to end before calling callback\n      var exitError = null;\n      function handleExit(err) {\n        if (err) {\n          exitError = err;\n        }\n\n        if (processExited && stdoutClosed && stderrClosed) {\n          if (exitError) {\n            if (stderr) {\n              exitError.message += '\\n' + stderr;\n            }\n\n            return handleCallback(exitError);\n          }\n\n          // Process output\n          var data = parseFfprobeOutput(stdout);\n\n          // Handle legacy output with \"TAG:x\" and \"DISPOSITION:x\" keys\n          [data.format].concat(data.streams).forEach(function(target) {\n            if (target) {\n              var legacyTagKeys = Object.keys(target).filter(legacyTag);\n\n              if (legacyTagKeys.length) {\n                target.tags = target.tags || {};\n\n                legacyTagKeys.forEach(function(tagKey) {\n                  target.tags[tagKey.substr(4)] = target[tagKey];\n                  delete target[tagKey];\n                });\n              }\n\n              var legacyDispositionKeys = Object.keys(target).filter(legacyDisposition);\n\n              if (legacyDispositionKeys.length) {\n                target.disposition = target.disposition || {};\n\n                legacyDispositionKeys.forEach(function(dispositionKey) {\n                  target.disposition[dispositionKey.substr(12)] = target[dispositionKey];\n                  delete target[dispositionKey];\n                });\n              }\n            }\n          });\n\n          handleCallback(null, data);\n        }\n      }\n\n      // Handle ffprobe exit\n      var processExited = false;\n      ffprobe.on('exit', function(code, signal) {\n        processExited = true;\n\n        if (code) {\n          handleExit(new Error('ffprobe exited with code ' + code));\n        } else if (signal) {\n          handleExit(new Error('ffprobe was killed with signal ' + signal));\n        } else {\n          handleExit();\n        }\n      });\n\n      // Handle stdout/stderr streams\n      ffprobe.stdout.on('data', function(data) {\n        stdout += data;\n      });\n\n      ffprobe.stdout.on('close', function() {\n        stdoutClosed = true;\n        handleExit();\n      });\n\n      ffprobe.stderr.on('data', function(data) {\n        stderr += data;\n      });\n\n      ffprobe.stderr.on('close', function() {\n        stderrClosed = true;\n        handleExit();\n      });\n    });\n  };\n};\n","/*jshint node:true*/\n'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar PassThrough = require('stream').PassThrough;\nvar async = require('async');\nvar utils = require('./utils');\n\n\n/*\n * Useful recipes for commands\n */\n\nmodule.exports = function recipes(proto) {\n  /**\n   * Execute ffmpeg command and save output to a file\n   *\n   * @method FfmpegCommand#save\n   * @category Processing\n   * @aliases saveToFile\n   *\n   * @param {String} output file path\n   * @return FfmpegCommand\n   */\n  proto.saveToFile =\n  proto.save = function(output) {\n    this.output(output).run();\n    return this;\n  };\n\n\n  /**\n   * Execute ffmpeg command and save output to a stream\n   *\n   * If 'stream' is not specified, a PassThrough stream is created and returned.\n   * 'options' will be used when piping ffmpeg output to the output stream\n   * (@see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options)\n   *\n   * @method FfmpegCommand#pipe\n   * @category Processing\n   * @aliases stream,writeToStream\n   *\n   * @param {stream.Writable} [stream] output stream\n   * @param {Object} [options={}] pipe options\n   * @return Output stream\n   */\n  proto.writeToStream =\n  proto.pipe =\n  proto.stream = function(stream, options) {\n    if (stream && !('writable' in stream)) {\n      options = stream;\n      stream = undefined;\n    }\n\n    if (!stream) {\n      if (process.version.match(/v0\\.8\\./)) {\n        throw new Error('PassThrough stream is not supported on node v0.8');\n      }\n\n      stream = new PassThrough();\n    }\n\n    this.output(stream, options).run();\n    return stream;\n  };\n\n\n  /**\n   * Generate images from a video\n   *\n   * Note: this method makes the command emit a 'filenames' event with an array of\n   * the generated image filenames.\n   *\n   * @method FfmpegCommand#screenshots\n   * @category Processing\n   * @aliases takeScreenshots,thumbnail,thumbnails,screenshot\n   *\n   * @param {Number|Object} [config=1] screenshot count or configuration object with\n   *   the following keys:\n   * @param {Number} [config.count] number of screenshots to take; using this option\n   *   takes screenshots at regular intervals (eg. count=4 would take screens at 20%, 40%,\n   *   60% and 80% of the video length).\n   * @param {String} [config.folder='.'] output folder\n   * @param {String} [config.filename='tn.png'] output filename pattern, may contain the following\n   *   tokens:\n   *   - '%s': offset in seconds\n   *   - '%w': screenshot width\n   *   - '%h': screenshot height\n   *   - '%r': screenshot resolution (same as '%wx%h')\n   *   - '%f': input filename\n   *   - '%b': input basename (filename w/o extension)\n   *   - '%i': index of screenshot in timemark array (can be zero-padded by using it like `%000i`)\n   * @param {Number[]|String[]} [config.timemarks] array of timemarks to take screenshots\n   *   at; each timemark may be a number of seconds, a '[[hh:]mm:]ss[.xxx]' string or a\n   *   'XX%' string.  Overrides 'count' if present.\n   * @param {Number[]|String[]} [config.timestamps] alias for 'timemarks'\n   * @param {Boolean} [config.fastSeek] use fast seek (less accurate)\n   * @param {String} [config.size] screenshot size, with the same syntax as {@link FfmpegCommand#size}\n   * @param {String} [folder] output folder (legacy alias for 'config.folder')\n   * @return FfmpegCommand\n   */\n  proto.takeScreenshots =\n  proto.thumbnail =\n  proto.thumbnails =\n  proto.screenshot =\n  proto.screenshots = function(config, folder) {\n    var self = this;\n    var source = this._currentInput.source;\n    config = config || { count: 1 };\n\n    // Accept a number of screenshots instead of a config object\n    if (typeof config === 'number') {\n      config = {\n        count: config\n      };\n    }\n\n    // Accept a second 'folder' parameter instead of config.folder\n    if (!('folder' in config)) {\n      config.folder = folder || '.';\n    }\n\n    // Accept 'timestamps' instead of 'timemarks'\n    if ('timestamps' in config) {\n      config.timemarks = config.timestamps;\n    }\n\n    // Compute timemarks from count if not present\n    if (!('timemarks' in config)) {\n      if (!config.count) {\n        throw new Error('Cannot take screenshots: neither a count nor a timemark list are specified');\n      }\n\n      var interval = 100 / (1 + config.count);\n      config.timemarks = [];\n      for (var i = 0; i < config.count; i++) {\n        config.timemarks.push((interval * (i + 1)) + '%');\n      }\n    }\n\n    // Parse size option\n    if ('size' in config) {\n      var fixedSize = config.size.match(/^(\\d+)x(\\d+)$/);\n      var fixedWidth = config.size.match(/^(\\d+)x\\?$/);\n      var fixedHeight = config.size.match(/^\\?x(\\d+)$/);\n      var percentSize = config.size.match(/^(\\d+)%$/);\n\n      if (!fixedSize && !fixedWidth && !fixedHeight && !percentSize) {\n        throw new Error('Invalid size parameter: ' + config.size);\n      }\n    }\n\n    // Metadata helper\n    var metadata;\n    function getMetadata(cb) {\n      if (metadata) {\n        cb(null, metadata);\n      } else {\n        self.ffprobe(function(err, meta) {\n          metadata = meta;\n          cb(err, meta);\n        });\n      }\n    }\n\n    async.waterfall([\n      // Compute percent timemarks if any\n      function computeTimemarks(next) {\n        if (config.timemarks.some(function(t) { return ('' + t).match(/^[\\d.]+%$/); })) {\n          if (typeof source !== 'string') {\n            return next(new Error('Cannot compute screenshot timemarks with an input stream, please specify fixed timemarks'));\n          }\n\n          getMetadata(function(err, meta) {\n            if (err) {\n              next(err);\n            } else {\n              // Select video stream with the highest resolution\n              var vstream = meta.streams.reduce(function(biggest, stream) {\n                if (stream.codec_type === 'video' && stream.width * stream.height > biggest.width * biggest.height) {\n                  return stream;\n                } else {\n                  return biggest;\n                }\n              }, { width: 0, height: 0 });\n\n              if (vstream.width === 0) {\n                return next(new Error('No video stream in input, cannot take screenshots'));\n              }\n\n              var duration = Number(vstream.duration);\n              if (isNaN(duration)) {\n                duration = Number(meta.format.duration);\n              }\n\n              if (isNaN(duration)) {\n                return next(new Error('Could not get input duration, please specify fixed timemarks'));\n              }\n\n              config.timemarks = config.timemarks.map(function(mark) {\n                if (('' + mark).match(/^([\\d.]+)%$/)) {\n                  return duration * parseFloat(mark) / 100;\n                } else {\n                  return mark;\n                }\n              });\n\n              next();\n            }\n          });\n        } else {\n          next();\n        }\n      },\n\n      // Turn all timemarks into numbers and sort them\n      function normalizeTimemarks(next) {\n        config.timemarks = config.timemarks.map(function(mark) {\n          return utils.timemarkToSeconds(mark);\n        }).sort(function(a, b) { return a - b; });\n\n        next();\n      },\n\n      // Add '_%i' to pattern when requesting multiple screenshots and no variable token is present\n      function fixPattern(next) {\n        var pattern = config.filename || 'tn.png';\n\n        if (pattern.indexOf('.') === -1) {\n          pattern += '.png';\n        }\n\n        if (config.timemarks.length > 1 && !pattern.match(/%(s|0*i)/)) {\n          var ext = path.extname(pattern);\n          pattern = path.join(path.dirname(pattern), path.basename(pattern, ext) + '_%i' + ext);\n        }\n\n        next(null, pattern);\n      },\n\n      // Replace filename tokens (%f, %b) in pattern\n      function replaceFilenameTokens(pattern, next) {\n        if (pattern.match(/%[bf]/)) {\n          if (typeof source !== 'string') {\n            return next(new Error('Cannot replace %f or %b when using an input stream'));\n          }\n\n          pattern = pattern\n            .replace(/%f/g, path.basename(source))\n            .replace(/%b/g, path.basename(source, path.extname(source)));\n        }\n\n        next(null, pattern);\n      },\n\n      // Compute size if needed\n      function getSize(pattern, next) {\n        if (pattern.match(/%[whr]/)) {\n          if (fixedSize) {\n            return next(null, pattern, fixedSize[1], fixedSize[2]);\n          }\n\n          getMetadata(function(err, meta) {\n            if (err) {\n              return next(new Error('Could not determine video resolution to replace %w, %h or %r'));\n            }\n\n            var vstream = meta.streams.reduce(function(biggest, stream) {\n              if (stream.codec_type === 'video' && stream.width * stream.height > biggest.width * biggest.height) {\n                return stream;\n              } else {\n                return biggest;\n              }\n            }, { width: 0, height: 0 });\n\n            if (vstream.width === 0) {\n              return next(new Error('No video stream in input, cannot replace %w, %h or %r'));\n            }\n\n            var width = vstream.width;\n            var height = vstream.height;\n\n            if (fixedWidth) {\n              height = height * Number(fixedWidth[1]) / width;\n              width = Number(fixedWidth[1]);\n            } else if (fixedHeight) {\n              width = width * Number(fixedHeight[1]) / height;\n              height = Number(fixedHeight[1]);\n            } else if (percentSize) {\n              width = width * Number(percentSize[1]) / 100;\n              height = height * Number(percentSize[1]) / 100;\n            }\n\n            next(null, pattern, Math.round(width / 2) * 2, Math.round(height / 2) * 2);\n          });\n        } else {\n          next(null, pattern, -1, -1);\n        }\n      },\n\n      // Replace size tokens (%w, %h, %r) in pattern\n      function replaceSizeTokens(pattern, width, height, next) {\n        pattern = pattern\n          .replace(/%r/g, '%wx%h')\n          .replace(/%w/g, width)\n          .replace(/%h/g, height);\n\n        next(null, pattern);\n      },\n\n      // Replace variable tokens in pattern (%s, %i) and generate filename list\n      function replaceVariableTokens(pattern, next) {\n        var filenames = config.timemarks.map(function(t, i) {\n          return pattern\n            .replace(/%s/g, utils.timemarkToSeconds(t))\n            .replace(/%(0*)i/g, function(match, padding) {\n              var idx = '' + (i + 1);\n              return padding.substr(0, Math.max(0, padding.length + 1 - idx.length)) + idx;\n            });\n        });\n\n        self.emit('filenames', filenames);\n        next(null, filenames);\n      },\n\n      // Create output directory\n      function createDirectory(filenames, next) {\n        fs.exists(config.folder, function(exists) {\n          if (!exists) {\n            fs.mkdir(config.folder, function(err) {\n              if (err) {\n                next(err);\n              } else {\n                next(null, filenames);\n              }\n            });\n          } else {\n            next(null, filenames);\n          }\n        });\n      }\n    ], function runCommand(err, filenames) {\n      if (err) {\n        return self.emit('error', err);\n      }\n\n      var count = config.timemarks.length;\n      var split;\n      var filters = [split = {\n        filter: 'split',\n        options: count,\n        outputs: []\n      }];\n\n      if ('size' in config) {\n        // Set size to generate size filters\n        self.size(config.size);\n\n        // Get size filters and chain them with 'sizeN' stream names\n        var sizeFilters =  self._currentOutput.sizeFilters.get().map(function(f, i) {\n          if (i > 0) {\n            f.inputs = 'size' + (i - 1);\n          }\n\n          f.outputs = 'size' + i;\n\n          return f;\n        });\n\n        // Input last size filter output into split filter\n        split.inputs = 'size' + (sizeFilters.length - 1);\n\n        // Add size filters in front of split filter\n        filters = sizeFilters.concat(filters);\n\n        // Remove size filters\n        self._currentOutput.sizeFilters.clear();\n      }\n\n      var first = 0;\n      for (var i = 0; i < count; i++) {\n        var stream = 'screen' + i;\n        split.outputs.push(stream);\n\n        if (i === 0) {\n          first = config.timemarks[i];\n          self.seekInput(first);\n        }\n\n        self.output(path.join(config.folder, filenames[i]))\n          .frames(1)\n          .map(stream);\n\n        if (i > 0) {\n          self.seek(config.timemarks[i] - first);\n        }\n      }\n\n      self.complexFilter(filters);\n      self.run();\n    });\n\n    return this;\n  };\n\n\n  /**\n   * Merge (concatenate) inputs to a single file\n   *\n   * @method FfmpegCommand#concat\n   * @category Processing\n   * @aliases concatenate,mergeToFile\n   *\n   * @param {String|Writable} target output file or writable stream\n   * @param {Object} [options] pipe options (only used when outputting to a writable stream)\n   * @return FfmpegCommand\n   */\n  proto.mergeToFile =\n  proto.concatenate =\n  proto.concat = function(target, options) {\n    // Find out which streams are present in the first non-stream input\n    var fileInput = this._inputs.filter(function(input) {\n      return !input.isStream;\n    })[0];\n\n    var self = this;\n    this.ffprobe(this._inputs.indexOf(fileInput), function(err, data) {\n      if (err) {\n        return self.emit('error', err);\n      }\n\n      var hasAudioStreams = data.streams.some(function(stream) {\n        return stream.codec_type === 'audio';\n      });\n\n      var hasVideoStreams = data.streams.some(function(stream) {\n        return stream.codec_type === 'video';\n      });\n\n      // Setup concat filter and start processing\n      self.output(target, options)\n        .complexFilter({\n          filter: 'concat',\n          options: {\n            n: self._inputs.length,\n            v: hasVideoStreams ? 1 : 0,\n            a: hasAudioStreams ? 1 : 0\n          }\n        })\n        .run();\n    });\n\n    return this;\n  };\n};\n","/*jshint node:true*/\n'use strict';\n\nvar path = require('path');\nvar util = require('util');\nvar EventEmitter = require('events').EventEmitter;\n\nvar utils = require('./utils');\nvar ARGLISTS = ['_global', '_audio', '_audioFilters', '_video', '_videoFilters', '_sizeFilters', '_complexFilters'];\n\n\n/**\n * Create an ffmpeg command\n *\n * Can be called with or without the 'new' operator, and the 'input' parameter\n * may be specified as 'options.source' instead (or passed later with the\n * addInput method).\n *\n * @constructor\n * @param {String|ReadableStream} [input] input file path or readable stream\n * @param {Object} [options] command options\n * @param {Object} [options.logger=<no logging>] logger object with 'error', 'warning', 'info' and 'debug' methods\n * @param {Number} [options.niceness=0] ffmpeg process niceness, ignored on Windows\n * @param {Number} [options.priority=0] alias for `niceness`\n * @param {String} [options.presets=\"fluent-ffmpeg/lib/presets\"] directory to load presets from\n * @param {String} [options.preset=\"fluent-ffmpeg/lib/presets\"] alias for `presets`\n * @param {String} [options.stdoutLines=100] maximum lines of ffmpeg output to keep in memory, use 0 for unlimited\n * @param {Number} [options.timeout=<no timeout>] ffmpeg processing timeout in seconds\n * @param {String|ReadableStream} [options.source=<no input>] alias for the `input` parameter\n */\nfunction FfmpegCommand(input, options) {\n  // Make 'new' optional\n  if (!(this instanceof FfmpegCommand)) {\n    return new FfmpegCommand(input, options);\n  }\n\n  EventEmitter.call(this);\n\n  if (typeof input === 'object' && !('readable' in input)) {\n    // Options object passed directly\n    options = input;\n  } else {\n    // Input passed first\n    options = options || {};\n    options.source = input;\n  }\n\n  // Add input if present\n  this._inputs = [];\n  if (options.source) {\n    this.input(options.source);\n  }\n\n  // Add target-less output for backwards compatibility\n  this._outputs = [];\n  this.output();\n\n  // Create argument lists\n  var self = this;\n  ['_global', '_complexFilters'].forEach(function(prop) {\n    self[prop] = utils.args();\n  });\n\n  // Set default option values\n  options.stdoutLines = 'stdoutLines' in options ? options.stdoutLines : 100;\n  options.presets = options.presets || options.preset || path.join(__dirname, 'presets');\n  options.niceness = options.niceness || options.priority || 0;\n\n  // Save options\n  this.options = options;\n\n  // Setup logger\n  this.logger = options.logger || {\n    debug: function() {},\n    info: function() {},\n    warn: function() {},\n    error: function() {}\n  };\n}\nutil.inherits(FfmpegCommand, EventEmitter);\nmodule.exports = FfmpegCommand;\n\n\n/**\n * Clone an ffmpeg command\n *\n * This method is useful when you want to process the same input multiple times.\n * It returns a new FfmpegCommand instance with the exact same options.\n *\n * All options set _after_ the clone() call will only be applied to the instance\n * it has been called on.\n *\n * @example\n *   var command = ffmpeg('/path/to/source.avi')\n *     .audioCodec('libfaac')\n *     .videoCodec('libx264')\n *     .format('mp4');\n *\n *   command.clone()\n *     .size('320x200')\n *     .save('/path/to/output-small.mp4');\n *\n *   command.clone()\n *     .size('640x400')\n *     .save('/path/to/output-medium.mp4');\n *\n *   command.save('/path/to/output-original-size.mp4');\n *\n * @method FfmpegCommand#clone\n * @return FfmpegCommand\n */\nFfmpegCommand.prototype.clone = function() {\n  var clone = new FfmpegCommand();\n  var self = this;\n\n  // Clone options and logger\n  clone.options = this.options;\n  clone.logger = this.logger;\n\n  // Clone inputs\n  clone._inputs = this._inputs.map(function(input) {\n    return {\n      source: input.source,\n      options: input.options.clone()\n    };\n  });\n\n  // Create first output\n  if ('target' in this._outputs[0]) {\n    // We have outputs set, don't clone them and create first output\n    clone._outputs = [];\n    clone.output();\n  } else {\n    // No outputs set, clone first output options\n    clone._outputs = [\n      clone._currentOutput = {\n        flags: {}\n      }\n    ];\n\n    ['audio', 'audioFilters', 'video', 'videoFilters', 'sizeFilters', 'options'].forEach(function(key) {\n      clone._currentOutput[key] = self._currentOutput[key].clone();\n    });\n\n    if (this._currentOutput.sizeData) {\n      clone._currentOutput.sizeData = {};\n      utils.copy(this._currentOutput.sizeData, clone._currentOutput.sizeData);\n    }\n\n    utils.copy(this._currentOutput.flags, clone._currentOutput.flags);\n  }\n\n  // Clone argument lists\n  ['_global', '_complexFilters'].forEach(function(prop) {\n    clone[prop] = self[prop].clone();\n  });\n\n  return clone;\n};\n\n\n/* Add methods from options submodules */\n\nrequire('./options/inputs')(FfmpegCommand.prototype);\nrequire('./options/audio')(FfmpegCommand.prototype);\nrequire('./options/video')(FfmpegCommand.prototype);\nrequire('./options/videosize')(FfmpegCommand.prototype);\nrequire('./options/output')(FfmpegCommand.prototype);\nrequire('./options/custom')(FfmpegCommand.prototype);\nrequire('./options/misc')(FfmpegCommand.prototype);\n\n\n/* Add processor methods */\n\nrequire('./processor')(FfmpegCommand.prototype);\n\n\n/* Add capabilities methods */\n\nrequire('./capabilities')(FfmpegCommand.prototype);\n\nFfmpegCommand.setFfmpegPath = function(path) {\n  (new FfmpegCommand()).setFfmpegPath(path);\n};\n\nFfmpegCommand.setFfprobePath = function(path) {\n  (new FfmpegCommand()).setFfprobePath(path);\n};\n\nFfmpegCommand.setFlvtoolPath = function(path) {\n  (new FfmpegCommand()).setFlvtoolPath(path);\n};\n\nFfmpegCommand.availableFilters =\nFfmpegCommand.getAvailableFilters = function(callback) {\n  (new FfmpegCommand()).availableFilters(callback);\n};\n\nFfmpegCommand.availableCodecs =\nFfmpegCommand.getAvailableCodecs = function(callback) {\n  (new FfmpegCommand()).availableCodecs(callback);\n};\n\nFfmpegCommand.availableFormats =\nFfmpegCommand.getAvailableFormats = function(callback) {\n  (new FfmpegCommand()).availableFormats(callback);\n};\n\nFfmpegCommand.availableEncoders =\nFfmpegCommand.getAvailableEncoders = function(callback) {\n  (new FfmpegCommand()).availableEncoders(callback);\n};\n\n\n/* Add ffprobe methods */\n\nrequire('./ffprobe')(FfmpegCommand.prototype);\n\nFfmpegCommand.ffprobe = function(file) {\n  var instance = new FfmpegCommand(file);\n  instance.ffprobe.apply(instance, Array.prototype.slice.call(arguments, 1));\n};\n\n/* Add processing recipes */\n\nrequire('./recipes')(FfmpegCommand.prototype);\n","module.exports = require('./lib/fluent-ffmpeg');\n","'use strict';\n\nmodule.exports = {\n  DEFAULT_INITIAL_SIZE: (8 * 1024),\n  DEFAULT_INCREMENT_AMOUNT: (8 * 1024),\n  DEFAULT_FREQUENCY: 1,\n  DEFAULT_CHUNK_SIZE: 1024\n};\n","'use strict';\n\nvar stream = require('stream');\nvar constants = require('./constants');\nvar util = require('util');\n\nvar ReadableStreamBuffer = module.exports = function(opts) {\n  var that = this;\n  opts = opts || {};\n\n  stream.Readable.call(this, opts);\n\n  this.stopped = false;\n\n  var frequency = opts.hasOwnProperty('frequency') ? opts.frequency : constants.DEFAULT_FREQUENCY;\n  var chunkSize = opts.chunkSize || constants.DEFAULT_CHUNK_SIZE;\n  var initialSize = opts.initialSize || constants.DEFAULT_INITIAL_SIZE;\n  var incrementAmount = opts.incrementAmount || constants.DEFAULT_INCREMENT_AMOUNT;\n\n  var size = 0;\n  var buffer = new Buffer(initialSize);\n  var allowPush = false;\n\n  var sendData = function() {\n    var amount = Math.min(chunkSize, size);\n    var sendMore = false;\n\n    if (amount > 0) {\n      var chunk = null;\n      chunk = new Buffer(amount);\n      buffer.copy(chunk, 0, 0, amount);\n\n      sendMore = that.push(chunk) !== false;\n      allowPush = sendMore;\n\n      buffer.copy(buffer, 0, amount, size);\n      size -= amount;\n    }\n\n    if(size === 0 && that.stopped) {\n      that.push(null);\n    }\n\n    if (sendMore) {\n      sendData.timeout = setTimeout(sendData, frequency);\n    }\n    else {\n      sendData.timeout = null;\n    }\n  };\n\n  this.stop = function() {\n    if (this.stopped) {\n      throw new Error('stop() called on already stopped ReadableStreamBuffer');\n    }\n    this.stopped = true;\n\n    if (size === 0) {\n      this.push(null);\n    }\n  };\n\n  this.size = function() {\n    return size;\n  };\n\n  this.maxSize = function() {\n    return buffer.length;\n  };\n\n  var increaseBufferIfNecessary = function(incomingDataSize) {\n    if((buffer.length - size) < incomingDataSize) {\n      var factor = Math.ceil((incomingDataSize - (buffer.length - size)) / incrementAmount);\n\n      var newBuffer = new Buffer(buffer.length + (incrementAmount * factor));\n      buffer.copy(newBuffer, 0, 0, size);\n      buffer = newBuffer;\n    }\n  };\n\n  var kickSendDataTask = function () {\n    if (!sendData.timeout && allowPush) {\n      sendData.timeout = setTimeout(sendData, frequency);\n    }\n  }\n\n  this.put = function(data, encoding) {\n    if (that.stopped) {\n      throw new Error('Tried to write data to a stopped ReadableStreamBuffer');\n    }\n\n    if(Buffer.isBuffer(data)) {\n      increaseBufferIfNecessary(data.length);\n      data.copy(buffer, size, 0);\n      size += data.length;\n    }\n    else {\n      data = data + '';\n      var dataSizeInBytes = Buffer.byteLength(data);\n      increaseBufferIfNecessary(dataSizeInBytes);\n      buffer.write(data, size, encoding || 'utf8');\n      size += dataSizeInBytes;\n    }\n\n    kickSendDataTask();\n  };\n\n  this._read = function() {\n    allowPush = true;\n    kickSendDataTask();\n  };\n};\n\nutil.inherits(ReadableStreamBuffer, stream.Readable);\n","'use strict';\n\nvar util = require('util');\nvar stream = require('stream');\nvar constants = require('./constants');\n\nvar WritableStreamBuffer = module.exports = function(opts) {\n  opts = opts || {};\n  opts.decodeStrings = true;\n\n  stream.Writable.call(this, opts);\n\n  var initialSize = opts.initialSize || constants.DEFAULT_INITIAL_SIZE;\n  var incrementAmount = opts.incrementAmount || constants.DEFAULT_INCREMENT_AMOUNT;\n\n  var buffer = new Buffer(initialSize);\n  var size = 0;\n\n  this.size = function() {\n    return size;\n  };\n\n  this.maxSize = function() {\n    return buffer.length;\n  };\n\n  this.getContents = function(length) {\n    if(!size) return false;\n\n    var data = new Buffer(Math.min(length || size, size));\n    buffer.copy(data, 0, 0, data.length);\n\n    if(data.length < size)\n      buffer.copy(buffer, 0, data.length);\n\n    size -= data.length;\n\n    return data;\n  };\n\n  this.getContentsAsString = function(encoding, length) {\n    if(!size) return false;\n\n    var data = buffer.toString(encoding || 'utf8', 0, Math.min(length || size, size));\n    var dataLength = Buffer.byteLength(data);\n\n    if(dataLength < size)\n      buffer.copy(buffer, 0, dataLength);\n\n    size -= dataLength;\n    return data;\n  };\n\n  var increaseBufferIfNecessary = function(incomingDataSize) {\n    if((buffer.length - size) < incomingDataSize) {\n      var factor = Math.ceil((incomingDataSize - (buffer.length - size)) / incrementAmount);\n\n      var newBuffer = new Buffer(buffer.length + (incrementAmount * factor));\n      buffer.copy(newBuffer, 0, 0, size);\n      buffer = newBuffer;\n    }\n  };\n\n  this._write = function(chunk, encoding, callback) {\n    increaseBufferIfNecessary(chunk.length);\n    chunk.copy(buffer, size, 0);\n    size += chunk.length;\n    callback();\n  };\n};\n\nutil.inherits(WritableStreamBuffer, stream.Writable);\n","'use strict';\n\nmodule.exports = require('./constants');\nmodule.exports.ReadableStreamBuffer = require('./readable_streambuffer');\nmodule.exports.WritableStreamBuffer = require('./writable_streambuffer');\n","export { CreativeValidator } from \"./main/creative-validator\";\n","import { ValidatorStrategy } from \"../interfaces/validator.interface\";\nimport { BackendValidatorStrategy } from \"../strategies/backend/backend.strategy\";\nimport { FrontendValidatorStrategy } from \"../strategies/frontend/frontend.strategy\";\nimport { AllowedFileTypes, AllowedValitators } from \"../types/validator\";\n\nexport class CreativeValidator {\n  private validatorStrategy: ValidatorStrategy;\n\n  constructor(validationType: AllowedValitators) {\n    this.validatorStrategy =\n      validationType === \"backend\"\n        ? new BackendValidatorStrategy()\n        : new FrontendValidatorStrategy();\n  }\n\n  async validate(\n    type: AllowedFileTypes,\n    file: File | Express.Multer.File | string\n  ) {\n    return await this.validatorStrategy.validate(type, file);\n  }\n}\n","import { ValidatorStrategy } from \"../../interfaces/validator.interface\";\nimport { AllowedFileTypes } from \"../../types/validator\";\nimport { BackendImageValidator } from \"./backend-image-validator\";\nimport { BackendVastValidator } from \"./backend-vast-validator\";\nimport { BackendVideoValidator } from \"./backend-video-validator\";\n\nexport class BackendValidatorStrategy implements ValidatorStrategy {\n  async validate(\n    type: AllowedFileTypes,\n    file?: File | Express.Multer.File | string\n  ): Promise<boolean> {\n    if ((type === \"image\" || type === \"video\") && !this.isMulterFile(file)) {\n      throw new Error(\"Invalid type for backend validation.\");\n    }\n\n    if (type === \"vast\" && !(file instanceof String)) {\n      throw new Error(\"Invalid type for backend validation.\");\n    }\n\n    switch (type) {\n      case \"image\":\n        return await this.validateImage(file as Express.Multer.File);\n      case \"video\":\n        return await this.validateVideo(file as Express.Multer.File);\n      case \"vast\":\n        return await this.validateVast(file as string);\n    }\n  }\n\n  private isMulterFile(object: any): object is Express.Multer.File {\n    return (\n      \"buffer\" in object &&\n      \"originalname\" in object &&\n      \"mimetype\" in object &&\n      \"size\" in object\n    );\n  }\n\n  private async validateVideo(file: Express.Multer.File): Promise<boolean> {\n    const backendVideoValidator = new BackendVideoValidator(file);\n    return await backendVideoValidator.validate();\n  }\n\n  private async validateImage(file: Express.Multer.File): Promise<boolean> {\n    const backendImageValidator = new BackendImageValidator(file);\n    return await backendImageValidator.validate();\n  }\n\n  private async validateVast(url: string): Promise<boolean> {\n    const backendVastValidator = new BackendVastValidator(url);\n    return await backendVastValidator.validate();\n  }\n}\n","export class BackendImageValidator {\n  constructor(private file: Express.Multer.File) {}\n\n  async validate() {\n    console.log(this.file);\n    return true;\n  }\n}\n","export class BackendVastValidator {\n  constructor(private url: string) {}\n\n  async validate() {\n    console.log(this.url);\n    return true;\n  }\n}\n","import { BackendVideoAnalyser } from \"../../utils/backend-video-analyser\";\n\nexport class BackendVideoValidator {\n  constructor(private file: Express.Multer.File) {}\n\n  async validate() {\n    // console.log(this.file);\n\n    // const tsFile = new File([this.file.buffer], this.file.filename, {\n    //   type: this.file.mimetype,\n    // });\n\n    // const newBuffer = await tsFile.arrayBuffer();\n    // const buffer = Buffer.from(newBuffer); // Can be used in  StreamBuffers.ReadableStreamBuffer readableStreamBuffer.put(buffer);\n\n    const backendVideoAnalyser = new BackendVideoAnalyser();\n    // backendVideoAnalyser.test();\n    const result = await backendVideoAnalyser.analyzeMediaBuffer(this.file);\n\n    console.log(result);\n\n    return true;\n  }\n}\n","import ffmpeg from \"fluent-ffmpeg\";\nimport streambuffer from \"stream-buffers\";\nimport { promises as fs } from \"fs\";\nimport path from \"path\";\nimport { VideoOrImageMetadata } from \"../types/validator\";\n\nexport class BackendVideoAnalyser {\n  constructor() {\n    if (process && process.platform === \"win32\") {\n      ffmpeg.setFfmpegPath(\"C:/ffmpeg-master-latest-win64-gpl/bin/ffmpeg.exe\");\n      ffmpeg.setFfprobePath(\n        \"C:/ffmpeg-master-latest-win64-gpl/bin/ffprobe.exe\"\n      );\n    }\n  }\n\n  private getResolutionQuality(width: number, height: number): string {\n    if (width >= 3840 && height >= 2160) return \"4K\";\n    if (width >= 2048 && height >= 1080) return \"2K\";\n    if (width >= 1920 && height >= 1080) return \"Full HD\";\n    if (width >= 1280 && height >= 720) return \"HD\";\n    return \"SD\";\n  }\n\n  test() {\n    console.log(\"test from here\");\n    // console.log(ffmpeg);\n    // console.log(streambuffer);\n    console.log(fs);\n  }\n\n  /**\n   * Generates a screenshot from the middle of a video.\n   * @param {Object} file - Express file object containing video data.\n   * @returns {Promise<Buffer>} - A buffer of the generated screenshot.\n   */\n  private async generateThumbnail(file: Express.Multer.File): Promise<Buffer> {\n    const tempDir = path.join(__dirname, \"tmp\");\n    const tempInputPath = path.join(tempDir, `temp_${Date.now()}`);\n    const tempOutputPath = path.join(tempDir, `screenshot_${Date.now()}.png`);\n\n    await fs.mkdir(tempDir, { recursive: true });\n    await fs.writeFile(tempInputPath, file.buffer);\n\n    return new Promise((resolve, reject) => {\n      ffmpeg(tempInputPath)\n        .on(\"error\", async (err) => {\n          console.error(\"Error generating screenshot:\", err);\n          reject(err);\n        })\n        .on(\"end\", async () => {\n          try {\n            const screenshotBuffer = await fs.readFile(tempOutputPath);\n            await fs.unlink(tempInputPath).catch(() => {});\n            await fs.unlink(tempOutputPath).catch(() => {});\n            resolve(screenshotBuffer);\n          } catch (readError) {\n            reject(readError);\n          }\n        })\n        .screenshots({\n          timestamps: [\"50%\"],\n          filename: path.basename(tempOutputPath),\n          folder: tempDir,\n        });\n    });\n  }\n\n  async analyzeMediaBuffer(\n    file: Express.Multer.File\n  ): Promise<VideoOrImageMetadata> {\n    return new Promise((resolve, reject) => {\n      const readableStreamBuffer = new streambuffer.ReadableStreamBuffer({\n        frequency: 10,\n        chunkSize: 2048,\n      });\n\n      readableStreamBuffer.put(file.buffer);\n      readableStreamBuffer.stop();\n\n      ffmpeg(readableStreamBuffer).ffprobe(async (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        const videoOrImageStream = data.streams.find(\n          (stream) =>\n            stream.codec_type === \"video\" || stream.codec_type === \"image\"\n        );\n\n        if (!videoOrImageStream) {\n          reject(new Error(\"No video or image stream found\"));\n          return;\n        }\n\n        const result: VideoOrImageMetadata = {\n          type: videoOrImageStream.codec_type + \"\",\n          resolution: {\n            width: videoOrImageStream.width as number,\n            height: videoOrImageStream.height as number,\n          },\n          format: data.format.format_name + \"\",\n        };\n\n        // Add video-specific properties and generate thumbnail if it's a video\n        if (file.mimetype.startsWith(\"video\")) {\n          result.durationInSeconds = videoOrImageStream.duration\n            ? Math.floor(parseFloat(videoOrImageStream.duration))\n            : undefined;\n          result.bitRate = Math.floor(\n            parseInt(videoOrImageStream.bit_rate + \"\") / 1024\n          );\n          result.resolution.quality = this.getResolutionQuality(\n            parseInt(videoOrImageStream.width + \"\"),\n            parseInt(videoOrImageStream.height + \"\")\n          );\n\n          const thumbnailBuffer = await this.generateThumbnail(file);\n          result.thumbnail = thumbnailBuffer;\n        }\n\n        resolve(result);\n      });\n    });\n  }\n}\n","import { ValidatorStrategy } from \"../../interfaces/validator.interface\";\nimport { AllowedFileTypes } from \"../../types/validator\";\nimport { FrontendImageValidator } from \"./frontend-image-validator\";\nimport { FrontendVastValidator } from \"./frontend-vast-validator\";\nimport { FrontendVideoValidator } from \"./frontend-video-validator\";\n\nexport class FrontendValidatorStrategy implements ValidatorStrategy {\n  async validate(\n    type: AllowedFileTypes,\n    file?: File | Express.Multer.File | string\n  ): Promise<boolean> {\n    if ((type === \"image\" || type === \"video\") && !this.isFile(file)) {\n      throw new Error(\"Invalid type for backend validation.\");\n    }\n\n    if (type === \"vast\" && !(file instanceof String)) {\n      throw new Error(\"Invalid type for backend validation.\");\n    }\n\n    switch (type) {\n      case \"image\":\n        return await this.validateImage(file as File);\n      case \"video\":\n        return await this.validateVideo(file as File);\n      case \"vast\":\n        return await this.validateVast(file as string);\n    }\n  }\n\n  private isFile(object: any): object is File {\n    return \"fileBits\" in object && \"fileName\" in object && \"options\" in object;\n  }\n\n  private async validateVideo(file: File): Promise<boolean> {\n    const frontendVideoValidator = new FrontendVideoValidator(file);\n    return await frontendVideoValidator.validate();\n  }\n\n  private async validateImage(file: File): Promise<boolean> {\n    const frontendImageValidator = new FrontendImageValidator(file);\n    return await frontendImageValidator.validate();\n  }\n\n  private async validateVast(url: string): Promise<boolean> {\n    const frontendVastValidator = new FrontendVastValidator(url);\n    return await frontendVastValidator.validate();\n  }\n}\n","import {\n  ALLOWED_IMAGE_FORMATS,\n  MAX_HEIGHT,\n  MAX_SIZE,\n  MAX_WIDTH,\n  MIN_HEIGHT,\n  MIN_WIDTH,\n} from \"../../constants/image.constants\";\nimport { normalizeFileType } from \"../../utils/utils\";\nexport class FrontendImageValidator {\n  constructor(private file: File) {}\n\n  async validate() {\n    console.log(this.file);\n\n    const img = await this.getImageFromFile(this.file);\n    console.log(img.width, img.height);\n\n    return true;\n  }\n\n  private validateSize() {\n    return this.file.size > MAX_SIZE;\n  }\n\n  private async validateResolution() {\n    const image = await this.getImageFromFile(this.file);\n    return (\n      image.width > MAX_WIDTH ||\n      image.width < MIN_WIDTH ||\n      image.height > MAX_HEIGHT ||\n      image.height < MIN_HEIGHT\n    );\n  }\n\n  private validateType() {\n    return ALLOWED_IMAGE_FORMATS.includes(normalizeFileType(this.file.type));\n  }\n\n  private async getImageFromFile(file: File): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n      file.arrayBuffer().then((arrayB) => {\n        const blob = new Blob([arrayB], { type: file.type });\n        const url = URL.createObjectURL(blob);\n\n        const img = new Image();\n        img.src = url;\n\n        img.onload = () => resolve(img);\n        img.onerror = reject;\n      });\n    });\n  }\n}\n","export const MIN_HEIGHT = 50;\n\nexport const MAX_HEIGHT = 2000;\n\nexport const MIN_WIDTH = 50;\n\nexport const MAX_WIDTH = 2000;\n\nexport const ALLOWED_IMAGE_FORMATS = ['JPEG', 'JPG', 'PNG', 'GIF'];\n\nexport const MAX_SIZE = 100000000;\n","export function normalizeFileType(type: string): string {\n  return (type.includes(\"/\") ? type.split(\"/\")[1] : type).toUpperCase();\n}\n","export class FrontendVastValidator {\n  constructor(private file: string) {}\n\n  async validate() {\n    console.log(this.file);\n    return true;\n  }\n}\n","export class FrontendVideoValidator {\n  constructor(private file: File) {}\n\n  async validate() {\n    console.log(this.file);\n    return true;\n  }\n}\n"],"mappings":"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","names":["options","path","module","path","fs","err","fs","path","ffmpeg","ffprobe","line","data","path","err","fs","path","i","path","require_fluent_ffmpeg","path","ffmpeg","streambuffer"]}