{"version":3,"sources":["../src/strategies/backend/backend-image-validator.ts","../src/strategies/backend/backend-vast-validator.ts","../src/strategies/backend/backend-video-validator.ts","../src/strategies/backend/backend.strategy.ts","../src/constants/image.constants.ts","../src/utils/utils.ts","../src/strategies/frontend/frontend-image-validator.ts","../src/strategies/frontend/frontend-vast-validator.ts","../src/strategies/frontend/frontend-video-validator.ts","../src/strategies/frontend/frontend.strategy.ts","../src/main/creative-validator.ts"],"sourcesContent":["export class BackendImageValidator {\n  constructor(private file: Express.Multer.File) {}\n\n  async validate() {\n    console.log(this.file);\n    return true;\n  }\n}\n","export class BackendVastValidator {\n  constructor(private url: string) {}\n\n  async validate() {\n    console.log(this.url);\n    return true;\n  }\n}\n","import { BackendVideoAnalyser } from \"../../utils/backend-video-analyser\";\n\nexport class BackendVideoValidator {\n  constructor(private file: Express.Multer.File) {}\n\n  async validate() {\n    // console.log(this.file);\n\n    // const tsFile = new File([this.file.buffer], this.file.filename, {\n    //   type: this.file.mimetype,\n    // });\n\n    // const newBuffer = await tsFile.arrayBuffer();\n    // const buffer = Buffer.from(newBuffer); // Can be used in  StreamBuffers.ReadableStreamBuffer readableStreamBuffer.put(buffer);\n\n    // const backendVideoAnalyser = new BackendVideoAnalyser();\n    // backendVideoAnalyser.test();\n    // const result = await backendVideoAnalyser.analyzeMediaBuffer(this.file);\n\n    // console.log(result);\n\n    return true;\n  }\n}\n","import { ValidatorStrategy } from \"../../interfaces/validator.interface\";\nimport { AllowedFileTypes } from \"../../types/validator\";\nimport { BackendImageValidator } from \"./backend-image-validator\";\nimport { BackendVastValidator } from \"./backend-vast-validator\";\nimport { BackendVideoValidator } from \"./backend-video-validator\";\n\nexport class BackendValidatorStrategy implements ValidatorStrategy {\n  async validate(\n    type: AllowedFileTypes,\n    file?: File | Express.Multer.File | string\n  ): Promise<boolean> {\n    if ((type === \"image\" || type === \"video\") && !this.isMulterFile(file)) {\n      throw new Error(\"Invalid type for backend validation.\");\n    }\n\n    if (type === \"vast\" && !(file instanceof String)) {\n      throw new Error(\"Invalid type for backend validation.\");\n    }\n\n    switch (type) {\n      case \"image\":\n        return await this.validateImage(file as Express.Multer.File);\n      case \"video\":\n        return await this.validateVideo(file as Express.Multer.File);\n      case \"vast\":\n        return await this.validateVast(file as string);\n    }\n  }\n\n  private isMulterFile(object: any): object is Express.Multer.File {\n    return (\n      \"buffer\" in object &&\n      \"originalname\" in object &&\n      \"mimetype\" in object &&\n      \"size\" in object\n    );\n  }\n\n  private async validateVideo(file: Express.Multer.File): Promise<boolean> {\n    const backendVideoValidator = new BackendVideoValidator(file);\n    return await backendVideoValidator.validate();\n  }\n\n  private async validateImage(file: Express.Multer.File): Promise<boolean> {\n    const backendImageValidator = new BackendImageValidator(file);\n    return await backendImageValidator.validate();\n  }\n\n  private async validateVast(url: string): Promise<boolean> {\n    const backendVastValidator = new BackendVastValidator(url);\n    return await backendVastValidator.validate();\n  }\n}\n","export const MIN_HEIGHT = 50;\n\nexport const MAX_HEIGHT = 2000;\n\nexport const MIN_WIDTH = 50;\n\nexport const MAX_WIDTH = 2000;\n\nexport const ALLOWED_IMAGE_FORMATS = ['JPEG', 'JPG', 'PNG', 'GIF'];\n\nexport const MAX_SIZE = 100000000;\n","export function normalizeFileType(type: string): string {\n  return (type.includes(\"/\") ? type.split(\"/\")[1] : type).toUpperCase();\n}\n","import {\n  ALLOWED_IMAGE_FORMATS,\n  MAX_HEIGHT,\n  MAX_SIZE,\n  MAX_WIDTH,\n  MIN_HEIGHT,\n  MIN_WIDTH,\n} from \"../../constants/image.constants\";\nimport { normalizeFileType } from \"../../utils/utils\";\nexport class FrontendImageValidator {\n  constructor(private file: File) {}\n\n  async validate() {\n    console.log(this.file);\n\n    const img = await this.getImageFromFile(this.file);\n    console.log(img.width, img.height);\n\n    return true;\n  }\n\n  private validateSize() {\n    return this.file.size > MAX_SIZE;\n  }\n\n  private async validateResolution() {\n    const image = await this.getImageFromFile(this.file);\n    return (\n      image.width > MAX_WIDTH ||\n      image.width < MIN_WIDTH ||\n      image.height > MAX_HEIGHT ||\n      image.height < MIN_HEIGHT\n    );\n  }\n\n  private validateType() {\n    return ALLOWED_IMAGE_FORMATS.includes(normalizeFileType(this.file.type));\n  }\n\n  private async getImageFromFile(file: File): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n      file.arrayBuffer().then((arrayB) => {\n        const blob = new Blob([arrayB], { type: file.type });\n        const url = URL.createObjectURL(blob);\n\n        const img = new Image();\n        img.src = url;\n\n        img.onload = () => resolve(img);\n        img.onerror = reject;\n      });\n    });\n  }\n}\n","export class FrontendVastValidator {\n  constructor(private file: string) {}\n\n  async validate() {\n    console.log(this.file);\n    return true;\n  }\n}\n","export class FrontendVideoValidator {\n  constructor(private file: File) {}\n\n  async validate() {\n    console.log(this.file);\n    return true;\n  }\n}\n","import { ValidatorStrategy } from \"../../interfaces/validator.interface\";\nimport { AllowedFileTypes } from \"../../types/validator\";\nimport { FrontendImageValidator } from \"./frontend-image-validator\";\nimport { FrontendVastValidator } from \"./frontend-vast-validator\";\nimport { FrontendVideoValidator } from \"./frontend-video-validator\";\n\nexport class FrontendValidatorStrategy implements ValidatorStrategy {\n  async validate(\n    type: AllowedFileTypes,\n    file?: File | Express.Multer.File | string\n  ): Promise<boolean> {\n    if ((type === \"image\" || type === \"video\") && !this.isFile(file)) {\n      throw new Error(\"Invalid type for frontend validation.\");\n    }\n\n    if (type === \"vast\" && !(file instanceof String)) {\n      throw new Error(\"Invalid type for frontend validation.\");\n    }\n\n    switch (type) {\n      case \"image\":\n        return await this.validateImage(file as File);\n      case \"video\":\n        return await this.validateVideo(file as File);\n      case \"vast\":\n        return await this.validateVast(file as string);\n    }\n  }\n\n  private isFile(object: any): object is File {\n    return \"name\" in object && \"size\" in object && \"type\" in object;\n  }\n\n  private async validateVideo(file: File): Promise<boolean> {\n    const frontendVideoValidator = new FrontendVideoValidator(file);\n    return await frontendVideoValidator.validate();\n  }\n\n  private async validateImage(file: File): Promise<boolean> {\n    const frontendImageValidator = new FrontendImageValidator(file);\n    return await frontendImageValidator.validate();\n  }\n\n  private async validateVast(url: string): Promise<boolean> {\n    const frontendVastValidator = new FrontendVastValidator(url);\n    return await frontendVastValidator.validate();\n  }\n}\n","import { ValidatorStrategy } from \"../interfaces/validator.interface\";\nimport { BackendValidatorStrategy } from \"../strategies/backend/backend.strategy\";\nimport { FrontendValidatorStrategy } from \"../strategies/frontend/frontend.strategy\";\nimport { AllowedFileTypes, AllowedValitators } from \"../types/validator\";\n\nexport class CreativeValidator {\n  private validatorStrategy: ValidatorStrategy;\n\n  constructor(validationType: AllowedValitators) {\n    this.validatorStrategy =\n      validationType === \"backend\"\n        ? new BackendValidatorStrategy()\n        : new FrontendValidatorStrategy();\n  }\n\n  async validate(\n    type: AllowedFileTypes,\n    file: File | Express.Multer.File | string\n  ) {\n    return await this.validatorStrategy.validate(type, file);\n  }\n}\n"],"mappings":"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","names":[]}