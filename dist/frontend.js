var I=["JPEG","JPG","PNG","GIF"];var r=class extends Error{code;constructor(e,t){super(e),this.code=t,this.name="ValidationError"}get errorCode(){return this.code}};function v(i){return(i.includes("/")?i.split("/")[1]:i).toUpperCase()}var s=class{async validate(e){if(!e.type.includes("image/"))throw new r("Invalid File Input: File is not an image",103);let t=[this.validateSize(e),await this.validateResolution(e),this.validateType(e)].filter(a=>a);if(t.length)throw new r(`Invalid Image: ${t.join(",")}`,100);return!0}validateSize(e){return e.size>1e8?`Invalid size. Maximum allowed is: ${1e8/1e6} MB.`:!1}async validateResolution(e){let t=await this.getImageFromFile(e);return t.width>2e3||t.width<50||t.height>2e3||t.height<50?`Invalid resolution. Min: ${50}x${50}. Max: ${2e3}x${2e3}.`:!1}validateType(e){return I.includes(v(e.type))?!1:`Invalid format. Only the following are allowed: ${I.join(", ")}.`}async getImageFromFile(e){return new Promise((t,a)=>{e.arrayBuffer().then(n=>{let l=new Blob([n],{type:e.type}),c=URL.createObjectURL(l),o=new Image;o.src=c,o.onload=()=>t(o),o.onerror=a})})}};import F from"axios";var d=class{async validate(e){return this.validateUrl(e),await this.validateXml(e),!0}validateUrl(e){try{return new URL(e),!0}catch{throw new r("Invalid Vast: Current input is not an url",102)}}async validateXml(e){if(!(await F.get(e)).data.includes("<?xml"))throw new r("Invalid Vast: Return from url is not XML",102);return!0}};var m=class{async validate(e){console.log("frontend validate video",e),console.log("hey there");let t=await this.getImageFromFile(e);return console.log(t.videoWidth),console.log(t.videoHeight),!0}async getImageFromFile(e){return new Promise((t,a)=>{e.arrayBuffer().then(n=>{console.log(n);let l=new Blob([n],{type:e.type}),c=URL.createObjectURL(l);console.log(l);let o=document.createElement("video");console.log("video 1"),console.log(o),console.log(o.videoHeight),console.log(o.videoWidth),o.onloadedmetadata=()=>t(o),o.src=c})})}};var p=class{async validate(e,t){if(t instanceof String&&e!=="vast")throw new r("Invalid File Input: String is only allowed for VAST.",103);switch(e){case"image":return await this.validateImage(t);case"video":return await this.validateVideo(t);case"vast":return await this.validateVast(t)}}async validateVideo(e){return await new m().validate(e)}async validateImage(e){return await new s().validate(e)}async validateVast(e){return await new d().validate(e)}};export{p as CreativeValidator};
