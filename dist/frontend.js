var l=["JPEG","JPG","PNG","GIF"];var r=class extends Error{code;constructor(e,t){super(e),this.code=t,this.name="ValidationError"}get errorCode(){return this.code}};function m(i){return(i.includes("/")?i.split("/")[1]:i).toUpperCase()}var o=class{constructor(e){this.file=e}async validate(){if(!this.file.type.includes("image/"))throw new r("Invalid File Input: File is not an image",103);let e=[this.validateSize(),await this.validateResolution(),this.validateType()].filter(t=>t);if(e.length)throw new r(`Invalid Image: ${e.join(",")}`,100);return!0}validateSize(){return this.file.size>1e8?`Invalid size. Maximum allowed is: ${1e8/1e6} MB.`:!1}async validateResolution(){let e=await this.getImageFromFile(this.file);return e.width>2e3||e.width<50||e.height>2e3||e.height<50?`Invalid resolution. Min: ${50}x${50}. Max: ${2e3}x${2e3}.`:!1}validateType(){return l.includes(m(this.file.type))?!1:`Invalid format. Only the following are allowed: ${l.join(", ")}.`}async getImageFromFile(e){return new Promise((t,u)=>{e.arrayBuffer().then(g=>{let h=new Blob([g],{type:e.type}),w=URL.createObjectURL(h),a=new Image;a.src=w,a.onload=()=>t(a),a.onerror=u})})}};var n=class{constructor(e){this.file=e}async validate(){return console.log("frontend validate vast",this.file),!0}};var s=class{constructor(e){this.file=e}async validate(){return console.log("frontend validate video",this.file),!0}};var d=class{async validate(e,t){if(t instanceof String&&e!=="vast")throw new Error("Invalid type for frontend validation.");switch(e){case"image":return await this.validateImage(t);case"video":return await this.validateVideo(t);case"vast":return await this.validateVast(t)}}async validateVideo(e){return await new s(e).validate()}async validateImage(e){return await new o(e).validate()}async validateVast(e){return await new n(e).validate()}};export{d as CreativeValidator};
