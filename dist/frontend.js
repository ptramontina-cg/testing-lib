var l=["JPEG","JPG","PNG","GIF"];function d(i){return(i.includes("/")?i.split("/")[1]:i).toUpperCase()}var a=class{constructor(e){this.file=e}async validate(){console.log(this.file);let e=await this.getImageFromFile(this.file);return console.log(e.width,e.height),!0}validateSize(){return this.file.size>1e8}async validateResolution(){let e=await this.getImageFromFile(this.file);return e.width>2e3||e.width<50||e.height>2e3||e.height<50}validateType(){return l.includes(d(this.file.type))}async getImageFromFile(e){return new Promise((t,c)=>{e.arrayBuffer().then(m=>{let p=new Blob([m],{type:e.type}),v=URL.createObjectURL(p),r=new Image;r.src=v,r.onload=()=>t(r),r.onerror=c})})}};var o=class{constructor(e){this.file=e}async validate(){return console.log(this.file),!0}};var n=class{constructor(e){this.file=e}async validate(){return console.log(this.file),console.log("video is valid in frontend"),!0}};var s=class{async validate(e,t){if((e==="image"||e==="video")&&!this.isFile(t))throw new Error("Invalid type for frontend validation.");if(e==="vast"&&!(t instanceof String))throw new Error("Invalid type for frontend validation.");switch(e){case"image":return await this.validateImage(t);case"video":return await this.validateVideo(t);case"vast":return await this.validateVast(t)}}isFile(e){return"name"in e&&"size"in e&&"type"in e}async validateVideo(e){return await new n(e).validate()}async validateImage(e){return await new a(e).validate()}async validateVast(e){return await new o(e).validate()}};export{s as CreativeValidator};
