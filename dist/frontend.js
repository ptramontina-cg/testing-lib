var d=["JPEG","JPG","PNG","GIF"];var r=class extends Error{code;constructor(t,e){super(t),this.code=e,this.name="ValidationError"}get errorCode(){return this.code}};function I(a){return(a.includes("/")?a.split("/")[1]:a).toUpperCase()}var o=class{async validate(t){if(!t.type.includes("image/"))throw new r("Invalid File Input: File is not an image",103);let e=[this.validateSize(t),await this.validateResolution(t),this.validateType(t)].filter(s=>s);if(e.length)throw new r(`Invalid Image: ${e.join(",")}`,100);return!0}validateSize(t){return t.size>1e8?`Invalid size. Maximum allowed is: ${1e8/1e6} MB.`:!1}async validateResolution(t){let e=await this.getImageFromFile(t);return e.width>2e3||e.width<50||e.height>2e3||e.height<50?`Invalid resolution. Min: ${50}x${50}. Max: ${2e3}x${2e3}.`:!1}validateType(t){return d.includes(I(t.type))?!1:`Invalid format. Only the following are allowed: ${d.join(", ")}.`}async getImageFromFile(t){return new Promise((e,s)=>{t.arrayBuffer().then(f=>{let V=new Blob([f],{type:t.type}),A=URL.createObjectURL(V),i=new Image;i.src=A,i.onload=()=>e(i),i.onerror=s})})}};import h from"axios";var n=class{async validate(t){return this.validateUrl(t),await this.validateXml(t),!0}validateUrl(t){try{return new URL(t),!0}catch{throw new r("Invalid Vast: Current input is not an url",102)}}async validateXml(t){if(!(await h.get(t)).data.includes("<?xml"))throw new r("Invalid Vast: Return from url is not XML",102);return!0}};var l=class{async validate(t){return console.log("frontend validate video",t),!0}};var m=class{async validate(t,e){if(e instanceof String&&t!=="vast")throw new r("Invalid File Input: String is only allowed for VAST.",103);switch(t){case"image":return await this.validateImage(e);case"video":return await this.validateVideo(e);case"vast":return await this.validateVast(e)}}async validateVideo(t){return await new l().validate(t)}async validateImage(t){return await new o().validate(t)}async validateVast(t){return await new n().validate(t)}};export{m as CreativeValidator};
