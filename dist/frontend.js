var c=["JPEG","JPG","PNG","GIF"];var o=class extends Error{code;constructor(e,t){super(e),this.code=t,this.name="ValidationError"}get errorCode(){return this.code}};function d(n){return(n.includes("/")?n.split("/")[1]:n).toUpperCase()}var I=class{async validate(e){if(!e.type.includes("image/"))throw new o("Invalid File Input: File is not an image",203);let t=await this.getImageFromFile(e),r=[this.validateSize(e.size),this.validateResolution(t.width,t.height),this.validateType(e.type)].filter(i=>i);if(r.length)throw new o(`Invalid Image: ${r.join(", ")}`,100);return!0}validateSize(e){return e>1e8?`Invalid size. Maximum allowed is: ${1e8/1e6} MB.`:!1}async validateResolution(e,t){return e>2e3||e<50||t>2e3||t<50?`Invalid resolution - Min: ${50}x${50} - Max: ${2e3}x${2e3}`:!1}validateType(e){return c.includes(d(e))?!1:`Invalid format - Only the following are allowed: ${c.join(", ")}`}async getImageFromFile(e){return new Promise((t,r)=>{e.arrayBuffer().then(i=>{let l=new Blob([i],{type:e.type}),s=URL.createObjectURL(l),a=new Image;a.src=s,a.onload=()=>t(a),a.onerror=r})})}};import h from"axios";var m=class{async validate(e){return this.validateUrl(e),await this.validateXml(e),!0}validateUrl(e){try{return new URL(e),!0}catch{throw new o("Invalid Vast: Current input is not an url",202)}}async validateXml(e){if(!(await h.get(e)).data.includes("<?xml"))throw new o("Invalid Vast: Return from url is not XML",202);return!0}};var w=[15,30,60],u={2160:3e4,1280:13e3,1080:12e3,720:8e3,432:2e3},F=["WEBM","OGG","MP4"],V=1e8;var p=class{async validate(e){if(!e.type.includes("video/"))throw new o("Invalid File Input: File is not a video",203);let t=await this.getVideoFromFile(e),r=[this.validateSize(e.size)];if(this.isVideoSupported(e)){let i=await this.getVideoFromFile(e);r.push(this.validateBitRate(e.size,i.duration,i.videoHeight),this.validateResolution(i.height),this.validateDuration(i.duration))}if(r=r.filter(i=>i),r.length)throw new o(`Invalid Video: ${r.join(", ")}`,201);return!0}validateSize(e){return e>V?`Invalid size - Maximum allowed is: ${V/1e6} MB.`:!1}validateBitRate(e,t,r){if(!(r in u))return"Invalid bitrate - Didn't match with resolution.";t=Math.round(t);let l=e*8/1e3,s=Math.round(l/t),a=u[r];return s>=a?!1:`Video has a bitrate of ${s} kbps which is incorrect for ${r}p resolution - Please the following or above: ${a}`}validateResolution(e){return e in u?"Resolution not supported - Please use 2160p, 1280p, 1080p, 720p or 432p.":!1}validateDuration(e){return e=Math.round(e),w.includes(e)?!1:`The uploaded video has duration ${e}sec which is not supported - Please use one of the following durations: 15s, 30s, 60s`}isVideoSupported(e){return F.includes(d(e.type))}async getVideoFromFile(e){return new Promise((t,r)=>{e.arrayBuffer().then(i=>{let l=new Blob([i]),s=URL.createObjectURL(l),a=document.createElement("video");a.onloadedmetadata=()=>t(a),a.src=s})})}};var E=class{async validate(e,t){if(t instanceof String&&e!=="vast")throw new o("Invalid File Input: String is only allowed for VAST.",203);switch(e){case"image":return await this.validateImage(t);case"video":return await this.validateVideo(t);case"vast":return await this.validateVast(t)}}async validateVideo(e){return await new p().validate(e)}async validateImage(e){return await new I().validate(e)}async validateVast(e){return await new m().validate(e)}};export{E as CreativeValidator};
