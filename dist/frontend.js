var u=["JPEG","JPG","PNG","GIF"];var r=class extends Error{code;constructor(e,t){super(e),this.code=t,this.name="ValidationError"}get errorCode(){return this.code}};function n(o){return(o.includes("/")?o.split("/")[1]:o).toUpperCase()}var l=class{async validate(e){if(!e.type.includes("image/"))throw new r("Invalid File Input: File is not an image",103);let t=[this.validateSize(e),await this.validateResolution(e),this.validateType(e)].filter(a=>a);if(t.length)throw new r(`Invalid Image: ${t.join(`
`)}`,100);return!0}validateSize(e){return e.size>1e8?`Invalid size. Maximum allowed is: ${1e8/1e6} MB.`:!1}async validateResolution(e){let t=await this.getImageFromFile(e);return t.width>2e3||t.width<50||t.height>2e3||t.height<50?`Invalid resolution. Min: ${50}x${50}. Max: ${2e3}x${2e3}.`:!1}validateType(e){return u.includes(n(e.type))?!1:`Invalid format. Only the following are allowed: ${u.join(", ")}.`}async getImageFromFile(e){return new Promise((t,a)=>{e.arrayBuffer().then(m=>{let I=new Blob([m],{type:e.type}),p=URL.createObjectURL(I),i=new Image;i.src=p,i.onload=()=>t(i),i.onerror=a})})}};import S from"axios";var s=class{async validate(e){return this.validateUrl(e),await this.validateXml(e),!0}validateUrl(e){try{return new URL(e),!0}catch{throw new r("Invalid Vast: Current input is not an url",102)}}async validateXml(e){if(!(await S.get(e)).data.includes("<?xml"))throw new r("Invalid Vast: Return from url is not XML",102);return!0}};var g=[15,30,60],A={2160:3e4,1280:13e3,1080:12e3,720:8e3,432:2e3},w=["WEBM","OGG","MP4"],v=1e8;var d=class{async validate(e){if(!e.type.includes("video/"))throw new r("Invalid File Input: File is not a video",103);let t=await this.getVideoFromFile(e);return console.log(t.duration),console.log(t.duration/60),console.log("h",t.videoHeight,"x","w",t.videoWidth),console.log(e.size),console.log(e.size/1e3),console.log("bitrate",e.size/1e6/(t.duration*.0075)),!0}validateSize(e){return e.size>v?`Invalid size. Maximum allowed is: ${v/1e6} MB.`:!1}validateBitRate(){console.log()}validateResolution(e){return this.heightToResolution(e.videoHeight)in A?"Resolution not supported. Please use 2160p, 1280p, 1080p, 720p or 432p.":!1}validateDuration(e){return Math.round(e.duration)+""in g}isVideoSupported(e){return w.includes(n(e.type))}async getVideoFromFile(e){return new Promise((t,a)=>{e.arrayBuffer().then(m=>{let I=new Blob([m]),p=URL.createObjectURL(I),i=document.createElement("video");i.onloadedmetadata=()=>t(i),i.src=p})})}heightToResolution(e){return e}};var E=class{async validate(e,t){if(t instanceof String&&e!=="vast")throw new r("Invalid File Input: String is only allowed for VAST.",103);switch(e){case"image":return await this.validateImage(t);case"video":return await this.validateVideo(t);case"vast":return await this.validateVast(t)}}async validateVideo(e){return await new d().validate(e)}async validateImage(e){return await new l().validate(e)}async validateVast(e){return await new s().validate(e)}};export{E as CreativeValidator};
